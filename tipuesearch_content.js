var tipuesearch = {"pages":[{"title":"About","text":"My name is Raymundo Cassani , I'm a researcher with an interdisciplinary formation, that includes biomedical signal processing, mainly ECG, respiration, PPG and EEG, and some experience with eye tracking, EOG, EMG, fNIRS and mmWave radar signals, all of this with applications in health diagnostics, human-machine interaction, entertainment and neurotechnologies. With a background in electrical engineering, specifically communications and electronics, I'm a person who finds enjoyment in improving, repairing and modifying, also, rarely messing stuff :( I find great joy at learning a bit of everything, my bet is that a bit of everything is better that everything of a bit. Some of my beside-research interests are data visualization, maps, beavers, videogames, science fiction, languages, (gear) mechanisms, etc. The goal of this blog is: Share some of my work, projects, experiences, dilemmas and / or solutions to problems (with software, hardware, methods, etc.) that I've encountered and expended a significant amount of time on them. Hopefully this will serve as timesaver and inspiration to others (including a future-me). Why CastorisCausa? From Latin Castoris (or related to the beaver) and Causa (cause), then roughly: \"For the sake of the beaver\" . The beaver (genus Castor), its nature and behaviour have always evoked my admiration and sympathy; being a semi-aquatic animal, it gets the best of two worlds. The beaver is the vivid description of hard work, dexterity and ingenuity. Not surprisingly, it has been taken as mascot by several engineering schools around the world. Drawing by Zu Contact For feedback, suggestions or complains, leave a comment in the respective post. Alternatively, my contact info is at the bottom of the page.","tags":"Page","url":"https://www.castoriscausa.com/pages/about-me","loc":"https://www.castoriscausa.com/pages/about-me"},{"title":"Publications","text":"Articles in Refereed Journals 2020 R. Cassani , G. S. Novak, T. H. Falk, and A. A. de Oliveira, \"Virtual reality and non-invasive brain stimulation for rehabilitation applications: a systematic review\" in Journal of NeuroEngineering and Rehabilitation , vol. 17, article number 147, 2020. 2020 M. Parent, I. Albuquerque, A. Tiwari, R. Cassani , J. Gagnon, D. Lafond, S. Tremblay, and T. H. Falk, \"PASS: A Multimodal Database of Physical Activity and Stress for Mobile Passive Body/Brain-Computer Interface Research,\" in Frontiers in Neuroscience , vol. 14, p. 542934, Dec. 2020. 2020 I. Albuquerque, A. Tiwari, M. Parent, R. Cassani , J. Gagnon, D. Lafond, S. Tremblay, and T. H. Falk, \"WAUC: A Multi-Modal Database for Mental Workload Assessment under Physical Activity\" in Frontiers in Neuroscience , vol. 14, p. 549524, Dec. 2020. 2020 R. Cassani , M.-A. Moinnereau, L. Ivanescu, O. Rosanne, and T. H. Falk, \"Neural interface instrumented virtual reality headsets: Toward next-generation immersive applications\" in IEEE Systems, Man, and Cybernetics Magazine , vol. 6, no. 3, pp. 20-28, July 2020. 2020 E. M. dos Santos, R. Cassani , T. H. Falk, and F. J. Fraga, \"Improved Motor Imagery Brain-computer Interface Performance via Adaptive Modulation Filtering and two-stage Classification,\" Biomedical Signal Processing and Control , vol. 57, p. 101812, Mar. 2020. 2019 R. Cassani and T. H. Falk, \"Alzheimer's Disease Diagnosis and Severity Level Detection Based on Electroencephalography Modulation Spectral ‘Patch' Features,\" in IEEE J. Biomed.Health Inform. , pp. 1–1, 2019. 2019 R. Cassani , M. Estarellas, R. San-Martin, F. J. Fraga, and T. H. Falk, \"Systematic Review on Resting-State EEG for Alzheimer's Disease Diagnosis and Progression Assessment,\" Disease Markers , vol. 2018, 2018. 2017 R. Cassani , T. H. Falk, F. J. Fraga, M. Cecchi, D. K. Moore, and R. Anghinah, \"Towards Automated Electroencephalography-based Alzheimer's Disease Diagnosis using Portable low-density Devices,\" Biomedical Signal Processing and Control , vol. 33, pp. 261–271, Mar.2017. 2014 R. Cassani , T. H. Falk, F. J. Fraga, P. A. M. Kanda, and R. Anghinah, \"The Effects of Automated Artifact Removal Algorithms on Electroencephalography-based Alzheimer's Disease Diagnosis,\" Frontiers in Aging Neuroscience , vol. 6, p. 55, 2014. 2014 V. Jacquemet, R. Cassani González , M. Sturmer, B. Dubé, J. Sharestan, A. Vinet, O.Mahid-dine, A. R. LeBlanc, G. Becker, T. Kus, and R. Nadeau, \"QT Interval Measurement and Correction in Patients with Atrial Flutter: A pilot study,\" Journal of Electrocardiology , vol. 47, pp. 228–235, Mar. 2014. 2013 V. Jacquemet, R. Cassani Gonzalez , B. Dubé, A. Vinet, A. L. Blanc, M. Sturmer, G.Becker, T. Kus, and R. Nadeau, \"Relevance of individualized qt interval correction in subjects with large heart rate fluctuations,\" Journal of Electrocardiology , vol. 46, no. 4, p. e34,2013. 2012 R. Cassani González , E. B. Engels, B. Dubé, R. Nadeau, A. Vinet, A. R. LeBlanc, M. Sturmer, G. Becker, T. Kus, and V. Jacquemet, \"Assessment of the sensitivity of detecting drug-induced QTc changes using subject-specific rate correction,\" Journal ofElectrocardiology , vol. 45, pp. 541–545, Nov. 2012. Articles in Conference Proceedings and Abstracts 2020 R. Cassani , A. Tiwari, I. Posner, B. Afonso, and T. H. Falk, \"Initial Investigation into Neurophysiological Correlates of Argentine Tango Flow States: a Case Study,\" in 2020 IEEE International Conference on Systems, Man, and Cybernetics (SMC), Toronto, ON, Canada, Oct. 2020 , pp. 3478–3483. 2020 R. Cassani , A. Tiwari, and T. H. Falk, \"Optimal filter characterization for photoplethysmography-based pulse rate and pulse power spectrum estimation,\" in 2020 42nd annual international conference of the IEEE engineering in medicine biology society (EMBC), Montreal, QC, Canada, Jul. 2020 , pp. 914–917. 2020 L. R. Trambaiolli, R. Cassani , and T. H. Falk, \"EEG spectro-temporal amplitude modulation as a measurement of cortical hemodynamics: an EEG-fNIRS study,\" in 2020 42nd annual international conference of the IEEE engineering in medicine biology society (EMBC), Montreal, QC, Canada, Jul. 2020 , pp. 3481–3484, 2020. 2020 A. Tiwari, R. Cassani , J.-F. Gagnon, D. Lafond, S. Tremblay, and T. H. Falk, \"Movement Artifact-Robust Mental Workload Assessment During Physical Activity Using Multi-Sensor Fusion,\" in 2020 IEEE International Conference on Systems, Man, and Cybernetics (SMC), Toronto, ON, Canada, Oct. 2020 , pp. 3471–3477. 2020 A. Tiwari, R. Cassani , J.-F. Gagnon, D. Lafond, S. Tremblay, and T. H. Falk, \"Prediction of stress and mental workload during police academy training using ultra-short-term heart rate variability and breathing analysis,\" in 2020 42nd annual international conference of the IEEE engineering in medicine biology society (EMBC), Montreal, QC, Canada, Jul. 2020 , pp. 4530–4533. 2019 B Jesus, R. Cassani , M. Cecchi, K. Fadem, W. McGeown, and T. H. Falk, \"Exploring predictive models of Alzheimer's disease severity based on resting state EEG and MRI features,\" in Poster Presentations at the 10th Canadian Conference on Dementia (CCD) Québec City, October 3, 2019. 2019 R. Cassani , I. Albuquerque, J. Monteiro, and T. H. Falk, \"AMA: An Open-source Amplitude Modulation Analysis Toolkit for Signal Processing Applications,\" in 2019 IEEE global conference on signal and information processing (GlobalSIP) , Nov. 2019, pp. 1–4, 2019. 2019 R. Cassani , A. Horai, L. Gheorge, T. H. Falk, \"Evaluating the Measurement of Driver Heart and Breathing Rates from a Sensor-Equipped Steering Wheel using Spectro-temporal Signal Processing,\" in 2019 IEEE Intelligent Transportation Systems Conference (ITSC), Auckland, New Zealand, Oct. 2019 , pp. 2843–2847 2019 R. Cassani and T. H. Falk, \"Automated Alzheimer's Disease Diagnosis using a Low-Density EEG Layout and New Features based on the Power of Modulation Spectral 'Patches',\" in 2019 IEEE International Conference on Systems, Man, and Cybernetics (SMC), Bari, Italy, Oct. 2019, , pp. 1259–1263. 2019 A. Tiwari, R. Cassani , S. Narayanan, and T. H. Falk, \"A Comparative Study of Stress and Anxiety Estimation in Ecological Settings Using a Smart-shirt and a Smart-bracelet,\" in 2019 41st Annual International Conference of the IEEE Engineering in Medicine and Biology Society (EMBC) , Berlin, Germany, 2019, pp. 2213–2216. 2018 W. McGeown, R. Cassani , T. H. Falk, M. Cecchi, K. Fadem, \"Neuroanatomical and Neuropsychological Correlates of Resting State EEG Diagnostic Features in Patients with Alzheimer's Disease,\" abstract AAIC , 2019. 2018 L. R. Trambaiolli, R. Cassani , C. E. Biazoli Jr, A. M. Cravo, J. a. R. Sato, and T. H.Falk, \"Resting-Awake EEG Amplitude Modulation Can Predict Performance of an fNIRS-Based Neurofeedback Task,\" in 2018 IEEE International Conference on Systems, Man, andCybernetics (SMC), Miyazaki, Japan, 2018, , 1128-1132. 2018 R. Cassani , M.-A. Moinnereau, and T. H. Falk, \"A Neurophysiological Sensor-Equipped Head-Mounted Display for Instrumental QoE Assessment of Immersive Multimedia,\" in 2018 Tenth International Conference on Quality of Multimedia Experience (QoMEX) , May 2018. Best paper award. 2018 R. Cassani , S. Narayanan, and T. H. Falk, \"Respiration Rate Estimation From Noisy Electrocardiograms Based on Modulation Spectral Analysis,\" in CMBES Proceedings , vol.41, 2018. 2017 M. Estarellas, R. Cassani , and T. H. Falk, \"Assessment of EEG-based biomarkers of Alzheimer's disease progression,\" in Mechanisms, Clinical Strategies, and Promising Treatments of Neurodegenerative Diseases. 13th International Conference AD/PDTM Vienna, Austria, March 29 to April 2, 2017: Abstracts, Neurodegenerative Diseases. 2015 R. Cassani and T. H. Falk, \"Automated Alzheimer's Disease Diagnosis Using a Portable 7-Channel Electroencephalography Device,\" Abstract in IUPESM World Congress , (Toronto), 2015. 2015 R. Cassani , H. Banville, and T. H. Falk, \"MuLES: An Open Source EEG Acquisition andStreaming Server for Quick and Simple Prototyping and Recording,\" in Proceedings of the 20th International Conference on Intelligent User Interfaces Companion, IUI Companion '15 , (New York, NY, USA), pp. 9–12, ACM, 2015. 2014 R. Cassani and T. H. Falk, \"Gaze and BCIs as Gaming Inputs: Opportunities and Open Challenges,\" in EyePlay Workshop, CHI-PLAY2014 , p. 4, 2014. 2014 R. Cassani , T. H. Falk, F. J. Fraga, P. A. Kanda, and R. Anghinah, \"Towards automated EEG-Based Alzheimer's disease diagnosis using relevance vector machines,\" in 5th ISSNIP-IEEE Biosignals and Biorobotics Conference (2014): Biosignals and Robotics for Better and Safer Living (BRC) , pp. 1–6, May 2014. 2013 R. Cassani , J. C. Sanchez, and R. Martinez, \"Implementation and evaluation of an adaptive method for reduce the respiration influence on Heart Rate Variability,\" in Circuits and Systems (LASCAS), 2013 IEEE Fourth Latin American Symposium On, pp. 1–4, IEEE, 2013. 2011 R. Cassani , P. Mejia, J. A. Tavares, J. C. Sanchez, and R. Martinez, \"Adaptive filtering for respiration influence reduction on Heart Rate Variability,\" in Electrical Engineering Computing Science and Automatic Control (CCE), 2011 8th International Conference On,pp. 1–5, IEEE, 2011. 2007 R. Cassani , R. Martinez, and O. Infante, \"Data acquisition system SIEVARTWIN (in Spanish),\" in 30th National Congress of Biomedical Engineering , 2007 Book Chapters 2018 R. Cassani and T. H. Falk, \"Spectrotemporal Modeling of Biomedical Signals: Theoretical Foundation and Applications,\" in Reference Module in Biomedical Sciences , Elsevier, 2018. Patents 2009 Monitor Enterprise, Monitoring System for Energy and Environmental Variables in Data Centers , Author Protection Rights Agency of Mexico (IMPI) Reg. Number 03-2009-0223101706000-01 , Cassani González Raymundo and Santoyo Delgado Raúl. Ph.D. Thesis 2018 \"Towards an Automated Portable Electroencephalography-based System for Alzheimer's Disease Diagnosis,\" INRS, 2018. M.Sc. Thesis 2012 \"Cancellation of the Respiration Influence on the Heart Rate Variability signal by using Adaptive Filtering (in Spanish),\" SEPI, ESIME Culhuacan, IPN, 2012.","tags":"pages","url":"https://www.castoriscausa.com/pages/publications","loc":"https://www.castoriscausa.com/pages/publications"},{"title":"Software","text":"This is list of some of the projects I have contributed. Most of the code is already available in my GitHub account , or it is available under request. The MuSAE Lab EEG Server (MuLES) is an EEG acquisition and streaming server programmed in LabVIEW. It creates a standard interface for portable EEG. Latest version is compatible with Interaxon Muse (2014), Emotiv EEG, Neuroelectrics Enobio, and OpenBCI devices. The Amplitude Modulation Analysis (AMA) Toolkit computes forward and inverse transformations between time, frequency, time-frequency and frequency-modulation-frequency domains. It also includes a GUI for the real-time exploration of the signals and their representations across different domains. The toolkit is available for Python3, Octave and MATLAB. Unity project to use a Ricoh Theta S camera to live-stream 360° video to a VR headset. https://github.com/rcassani/ThetaWifiStreaming2VRheadset . The Bluetooth Low-Energy (BLE) Toolkit for LabVIEW is an implementation of the BGAPI protocol v1.3 , that allows the communication with BLE devices over USB/UART in LabVIEW. The toolkit has been developed and tested with the BLE USB dongle BLED112 . The OpenBCI Toolkit for LabVIEW in a LabVIEW implementation of the OpenBCI communication protocol . It allows the configuration and data acquistion from the OpenBCI Cyton board (using its OpenBCI DONGLE ) for firmware 2.x or higher. The LabVIEW Emotiv Toolkit V2 extends the V1 by adding the capability of acquiring raw EEG data from the Emotiv Epoc and Epoc+ headsets. neuralDrift is a collaborative multiplayer neurogame based on brain-computer interfaces. The game consists in a LEGO© MINDSTORMS© EV3 robot, an Android device displaying the game state, and requires two EEG devices supported by MuLES .","tags":"pages","url":"https://www.castoriscausa.com/pages/software","loc":"https://www.castoriscausa.com/pages/software"},{"title":"Matlab file association in Linux","text":"In contrast to Matlab for Windows and macOS, Matlab for Linux does not automatically make the associations with its related files .m , .mat , and .fig . This post describes the how to do the association, it includes: 1. defining MIME types , 2. setting icons, and 3. creating desktop entries ( .desktop files to define Matlab as the application for these MIME types). I'm using Cinnamon as desktop environment (thus it should work in Gnome without changes), and Arch Linux distribution. Matlab shortcut in main Menu and Desktop This is not necessary for the association, but it may play useful. Copy Matlab icon file from the Matlab installation directory to the shared icons 1 # cp /usr/local/MATLAB/R2020b/bin/glnxa64/cef_resources/matlab_icon.png /usr/share/icons Create a matlab_2020b.desktop file at /usr/share/applications 1 2 3 4 5 6 7 [ Desktop Entry ] Type = Application Name = MATLAB 2020b Icon = /usr/share/icons/matlab_icon.png Exec = /usr/local/MATLAB/R2020b/bin/matlab -desktop Categories = Development Terminal = false Change the permissions to be executable: 1 # chmod +x matlab_r2020b.desktop For the Desktop shortcut, just copy this matlab_2020b.desktop to ~/Desktop In this post describes the how to do the association, it includes: defining MIME types , setting icons, and creating desktop entries ( .desktop files to define Matlab as the application for these MIME types). I'm using Cinnamon as desktop environment (thus it should work in Gnome without changes), and Arch Linux distribution. Associate .m , .mat and .fig files with Matlab 1. MIME types The MIME type for Matlab .m files is part of the freedesktop.org.xml file which is present in /usr/share/mime/packages/ . Thus let's create the MIME types for .mat and .fig . Create the file /usr/share/mime/packages/matlab-typemimes.xml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <mime-info xmlns= 'http://www.freedesktop.org/standards/shared-mime-info' > <mime-type type= \"image/x-matlab-fig\" > <comment> MATLAB figure </comment> <magic priority= \"50\" > <match value= \"MATLAB\" type= \"string\" offset= \"0\" /> </magic> <glob pattern= \"*.fig\" weight= \"60\" /> <generic-icon name= \"matlab-fig\" /> </mime-type> <mime-type type= \"application/x-matlab-data\" > <comment> MATLAB data file </comment> <magic priority= \"50\" > <match value= \"MATLAB\" type= \"string\" offset= \"0\" /> </magic> <glob pattern= \"*.mat\" weight= \"60\" /> <generic-icon name= \"matlab-mat\" /> </mime-type> </mime-info> This MIME definition is based on https://lists.freedesktop.org/archives/xdg/2010-October/011673.html Update MIME database :::bash # update-mime-database /usr/share/mime 2. Icons The icons for .mat and .fig files is set to be the same as for .m files. In /usr/share/icons/ , copy all the instances of text-x-matlab.svg as image-x-matlab-fig.svg and application-x-matlab-data.svg . And Run gtk-update-icon-cache for each of the icon directories. 1 2 3 # find /usr/share/icons -name text-x-matlab.svg -execdir echo cp {} image-x-matlab-fig.svg ';' # find /usr/share/icons -name text-x-matlab.svg -execdir echo cp {} application-x-matlab-data-svg ';' # find -maxdepth 1 -type d -execdir gtk-update-icon-cache {} ';' 3. Desktop entries Different Matlab files are called in different way by MATLAB: 1 2 3 matlab -desktop -r \"edit %f;\" matlab -desktop -r \"uiimport %f;\" matlab -desktop -r \"openfig %f;\" As such, it is necessary to create a desktop entry file for each MIME type reflecting how Matlab is called to open such MIME files. These files will be created in /usr/share/applications File matlab_2020b_m.desktop 1 2 3 Exec = /usr/local/MATLAB/R2020b/bin/matlab -desktop -r \"edit %f;\" MimeType = text/x-matlab NoDisplay = true File matlab_2020b_mat.desktop 1 2 3 Exec = /usr/local/MATLAB/R2020b/bin/matlab -desktop -r \"uiimport %f;\" MimeType = application/x-matlab-data NoDisplay = true File matlab_2020b_fig.desktop 1 2 3 Exec = /usr/local/MATLAB/R2020b/bin/matlab -desktop -r \"openfig %f;\" MimeType = image/x-matlab-fig NoDisplay = true The NoDisplay=true prevents that these desktop entry files appear in the main Menu. Conclusion Now the different Matlab files are associated with Matlab and opening them in the file explorer creates a new instance of Matlab and opens the selected file. Opening the file occurs in a new instance of Matlab ( link ), In the future I'll look for alternatives to open the file in the current Matlab instance. References MIME types Desktop entries Matlab MIME types Adding MIME types in Gnome","tags":"posts","url":"https://www.castoriscausa.com/posts/2021/06/06/matlab-linux-file-association/","loc":"https://www.castoriscausa.com/posts/2021/06/06/matlab-linux-file-association/"},{"title":"Sharing a Git repository directory between Linux and Windows","text":"Situation : The setup is the following: my laptop has dual-boot setup with Linux and Windows, and a disk (NTFS) is shared between systems. I wanted to have a directory for a Git repository (in the shared disk) in such a way that: It is possible to pull and push from it regarding the OS The difference in the end-of-line characters ( CRLF in Windows and LF in Linux) do not cause problems. The solution To share the same repository folder with Windows and Linux, it's necessary to configure Git to properly handle the end-of-line characters. In Windows use: $ git config --global core.autocrlf auto In Linux use: $ git config --global core.autocrlf input With this configuration when a file is added to the index in Windows, the auto configuration makes that all the CRLF are converted to LF, and that when the files are checked LF are converted to CRLF. As the repository directory is shared between OSs, when a file is edited in Windows (thus has CRLF) but is added to the index in Linux, the input configuration makes that the CRLF are converted into LF, but when the files are checked, the LF are not converted to CRLF. More info on Git configuration here .","tags":"posts","url":"https://www.castoriscausa.com/posts/2021/05/09/sharing-git-repo-dir/","loc":"https://www.castoriscausa.com/posts/2021/05/09/sharing-git-repo-dir/"},{"title":"Shared Bluetooth devices in dual-boot PC","text":"Scenario You have a Bluetooth (BT) Device (headphones, keyboard, mouse, etc.) with MAC address XX:XX:XX:XX:XX:XX , and you want to use this BT device in a dual OS PC (in this case Linux and Windows), which as a BT Adapter with MAC address YY:YY:YY:YY:YY:YY . Pairing the device in both OS does not work! Because of the way the Bluetooth pairing process happens: every time the Device and the Adapter are paired a shared secret Link Key is generated. This Link Key is used to authenticate the Device-Adapter connection. As such pairing in one OS will overwrite the Link Key . The solution The solution is to use the same Link Key in both operative systems. First, pair the Device and Adapter in OS A Pair the Device and Adapter in OS B Get the Link Key generated in OS B Modify the Link Key in OS A to be the one you got from OS B. The specific instruction vary depending of which OS does first the pairing. Below the instructions for both cases: If Linux is the OS A: instructions If Windows is the OS A instructions Linux first Pair the Device in Linux Pair the Device on Windows Get the Link Key in Windows Get PSTools: https://docs.microsoft.com/en-us/sysinternals/downloads/psexec Run as Administrator: 1 $ ./psexec -s -i regedit.exe Go to: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys\\YYYYYYYYYYYY\\ Copy the Value (this is the Link Key) corresponding to Key: MAC address of the Device ( XXXXXXXXXXXX ) The Link Key in Windows has spaces and lower cases. To be used in Linux, it should not have spaces and be in Capitals. Set the Link Key from Windows into Linux Open the directory: /var/lib/bluetooth/[YY:YY:YY:YY:YY:YY]/[XX:XX:XX:XX:XX:XX]/ Edit the Key field in [LinkKey] section of the info file with the Value obtained from Windows 1 2 [ LinkKey ] Key = B99999999FFFFFFFFF999999999FFFFF Reboot Windows first Pair the Device in Windows Pair the Device on Linux Get the Link Key in Linux Open the directory: /var/lib/bluetooth/[YY:YY:YY:YY:YY:YY]/[XX:XX:XX:XX:XX:XX]/info Copy the Key field in [LinkKey] section of the info file, this is the Link Key 1 2 [ LinkKey ] Key = B99999999FFFFFFFFF999999999FFFFF [ the LinkKeys for the device ] Set the Link Key from Linux into Windows Get PSTools: https://docs.microsoft.com/en-us/sysinternals/downloads/psexec 1 $ ./psexec -s -i regedit.exe Go to: HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\BTHPORT\\Parameters\\Keys\\YYYYYYYYYYYY Edit the Value (this is the Link Key) corresponding to Key: MAC address of the Device ( XXXXXXXXXXXX ) The Link Key in Windows has spaces is in lower case. Format the Link Key from Linux accordingly. Reboot If the Device cannot be forgotten in Windows (to do a fresh pairing), use BluetoothCLTools to remove it from the Command Line.","tags":"posts","url":"https://www.castoriscausa.com/posts/2021/02/28/bluetooth-dual-boot/","loc":"https://www.castoriscausa.com/posts/2021/02/28/bluetooth-dual-boot/"},{"title":"7 steps for contributing a GitHub project","text":"Congratulations! It's amazing that you're thinking into contributing to an open-source project. Although the task seems intimidating, it can be broken into some simple steps. First of all , check if the project you want to contribute to has a CONTRIBUTING file. If it exists, this file presents the guidelines for repository contributors for the project. Let's assume the you ( YOUR-USERNAME ) want to contribute to a the project COOL-PROJECT which repository is in the COOL-USERNAME GitHub account. In general the process to contribute to an open-source project can be divided into 7 simple steps. These steps are expanded with great detail in this wonderful post: https://akrabat.com/the-beginners-guide-to-contributing-to-a-github-project/ . Fork the repository from https://github.com/COOL-USERNAME/COOL-PROJECT to your GitHub account and clone it to your computer. 1 $ git clone https://github.com/YOUR-USERNAME/COOL-PROJECT.git Create a upstream remote (to this repository) and sync your local copy. 1 2 $ git remote add upstream https://github.com/COOL-USERNAME/COOL-PROJECT $ git remote -v At this point the origin remote refers to your forked repository in your account ( https://github.com/YOUR-USERNAME/COOL-PROJECT ) and upstream to the original repository ( https://github.com/COOL-USERNAME/COOL-PROJECT.git ). To sync your local and origin repositories to the upstream repository, pull from upstream , and push to origin . 1 2 $ git checkout master $ git pull upstream master && git push origin master Create a branch in your local repository. This branch will contain your contribution. 1 git checkout -b fixing-something Perform your contribution, write[good commit messages, and commit. If your contributions solves an open issue, close it with the proper commit message . NOTE: Make ONLY ONE contribution per branch. Push your local branch to your fork in GitHub ( https://github.com/YOUR-USERNAME/COOL-PROJECT ). 1 git push -u origin fixing-something On GitHub, create a new Pull Request from your fork. Provide feedback about the Pull Request, and if things are correct, your Pull Request will be merged upstream repository. Example An example of a CONTRIBUTING file listing these steps in an open-source project cab be found here: https://github.com/MuSAELab/amplitude-modulation-analysis-module","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/12/28/steps-contributing-github-project/","loc":"https://www.castoriscausa.com/posts/2020/12/28/steps-contributing-github-project/"},{"title":"Sync Thunderbird Calendar and Google Calendar without add-ons","text":"Since its version 78, Thunderbird has Lightning calendar built-in . The most popular way to sync Thunderbird calendar with Google Calendars is to use the add-on Provider for Google Caledar . However, it seems there are some issues when trying to add email event invitations to the calendar directly, as it's shown that \"No writable calendars are configured for invitations. Please check calendar configuration\" . The alternative is to connect to Google Calendar using the CalDAV method , as indicated in this answer link . This post expands on that answer. The idea is to obtain a ULR to connect to your Google Calendar via CalDAV, this URL is comprised by a base URL and the Calendar ID. 1. Base URL: https://apidata.googleusercontent.com/caldav/v2/calid/events calid will be replaced for the Calendar ID that you want to sync. 2. Getting Calendar ID Go to Google Calendar and open Settings (gear icon at top right). In Settings , in the left, click on the calendar that you want to sync, and after click on Integrate calendar . Here you'll find the Calendar ID string. Very often this string has special characters such as #, @, thus it cannot be used like that to make a valid URL. The URL-valid Calendar ID can extracted from src tag in the Public URL to this calendar URL, or URL-encoded . Getting Calendar ID from Google Calendar Settings. In this example, the Public URL to this calendar for the Holidays in Mexico calendar is: https://calendar.google.com/calendar/embed?src=en.mexican%23holiday%40group.v.calendar.google.com&ctz=America%2FToronto , thus the Calendar ID is en.mexican%23holiday%40group.v.calendar.google.com . Finally, the full URL for this calendar is created by then using the Calendar ID as calid in the base URL: https://apidata.googleusercontent.com/caldav/v2/en.mexican%23holiday%40group.v.calendar.google.com/events 3. Create the Calendar in Thunderbird Create New Calendar, select On the Network . Select CalDav as Format , leave empty the Username , and in Location use the URL created in the previous step. More detailed steps . Lastly, you will be prompted to put your Google credentials.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/12/08/thunderbird-google-calendar-no-addon/","loc":"https://www.castoriscausa.com/posts/2020/12/08/thunderbird-google-calendar-no-addon/"},{"title":"Game Boy Pocket with adjustable backlight","text":"Some months ago I got the this LED panel from Hand-Held Legend to add backlight to the display of the Game Boy Pocket . The installation was quite simple and went without problems using the instructions provided and this useful video . As the panel is powered is connected to 5 V, a resistor of 100 or 150 \\(\\Omega\\) is required to avoid a super bright backlight. Game Boy Pocket with backlight. Last weekend, I revisited my modded Game Boy and realized that I haven't used it as much as I expected. The culprit? , the backlight itself, the intensity is good during daytime, but it's too bright to play at night in a dim room. To fix this, I decided to install a potentiometer and make it easily accessible to change the backlight intensity accordingly. This modification was a success and I am very satisfied with the result . Below I describe the procedure for modding the Game Boy Pocket. Procedure Materials To install the LED backlight panel adjustable backlight, check the Required Equipment . For the wiring I used magnet wire 28 AWG, as it's easy to hide and pass through tight places. Also, sandpaper, a drill and drill bits are needed, this is be cause to add the potentiometer two extra modifications are needed: Enlarging an existent hole in the PCB with a 3/64\" or 1/16\" drill bit. Making a new hole in the plastic case with a 1/8\" drill bit. Beside the panel, a 100 \\(\\Omega\\) resistor and 5 k \\(\\Omega\\) potentiometer are needed. Due to the space limitations, I used as vertical skeleton trimmer potentiometer or trimpot . Skeleton vertical trimpot. Installation The electronic components: LED panel (D1). 100 \\(\\Omega\\) resistor (R1) and the variable resistor (R2) are connected as follows. Electric circuit for adjustable backlight. The fact that R1 and R2 are \"before\" and \"after\" the D1 does not matter, the y could be in any place in the series circuit. However, they were placed like that to facilitate the physical installation of the components. The installation can be broken in three parts: LED panel placement Connection to 5 V Trimpot placement and connection to ground 1. LED panel placement For this first part, follow the instructions in this video: 2. Connection to 5 V The positive connection of the LED panel is done through R1, and can be done to this point. Connection to 5 V. 3. Trimpot placement and connection to ground Let's prepare the trimpot. Remove the pins for the both the extreme connections. And by seen the trimpot from the back, place a drop of solder in the right connection. Preparing the trimpot. Enlarge this existing through hole in the PCB with the 3/64\" drill bit. This through hole connects two ground planes on each side of the PCB. Through hole to enlarge. With help of sandpaper and patience remove the paint around the new through hole on both sizes of the PCB and insert the trimpot facing back, with the position it will fit nicely in the case. Placing trimpot. Solder the negative connection of the LED panel to the trimpot terminal that has already solder. Connection to graound. Finally, close the Game Boy Pocket and identify where the trimmer is make hole with the 1/16\" drill bit in the case. In my case, I have a clear case, which makes the task way more easier. Game Boy Pocket case with hole Close the Game Boy and enjoy the adjustable backlight. Result Game Boy Pocket with adjustable backlight. For the moment, I need a small flat screwdriver to adjust the backlight intensity. I have in mind to 3D print a small piece to do adjustment, something like a watch crown. if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" availableFonts: ['STIX', 'TeX'],\" + \" preferredFont: 'STIX',\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/09/20/gameboy-pocket-adjustable-backlight/","loc":"https://www.castoriscausa.com/posts/2020/09/20/gameboy-pocket-adjustable-backlight/"},{"title":"Multiple comparisons problem: a visual approach","text":"When multiple statistical comparison are simultaneously performed, the risk of discovering false statistical significance increases as the number of comparisons increases. As such, Bonferroni correction is a commonly used method to address this multiple comparisons problem. In this post provides a visual demonstration to show why the multiple comparison problem is presented and needs to be addressed. The demonstration is based on theoretical and experimental results, and with it I hope the multiple comparisons problem will look more intuitive and understandable. All the codes to generate the results and figures in this post can be found here . Comparing groups Let's have two populations or random variables (RV) \\(X\\) and \\(Y\\) . We want to evaluate if the means of these populations are significantly different. In other words, we want to perform an hypothesis test to determine if there is a significant difference between their means which are \\(\\mu_X\\) and \\(\\mu_Y\\) respectively. In most of the cases, there is not have access to all the realizations of the RVs, as such the hypothesis test is performed with statistical samples (data) that are obtained by sampling the RVs, this is to say, by performing an experiment. Two hypothesis are considered: one null hypothesis \\(H_0\\) (there is no difference between means), and one alternative hypothesis \\(H_1\\) (there is difference between means), these are formulated as: \\(H_0\\) : \\(\\mu_X = \\mu_Y\\) or \\(\\mu_X - \\mu_Y = 0\\) \\(H_1\\) : \\(\\mu_X \\neq \\mu_Y\\) or \\(\\mu_X - \\mu_Y \\neq 0\\) It is concluded that there is a significant difference in the population means, \\(H_0\\) is rejected , if there probability of having a difference between means at least or larger than the observed from the data is smaller than the significance level or \\(\\alpha\\) . Otherwise, \\(H_0\\) is NOT rejected based on the available data. A commonly used value for \\(\\alpha\\) is 0.05 (this is to say 5%). To demonstrate the effects of multiple comparisons, the same the same hypothesis test will be tested in two scenarios: One comparison: \\(X\\) and \\(Y\\) are described as univariate or single RV. Two or more comparisons: \\(X\\) and \\(Y\\) are described as multivariate RV. Note: when \\(n\\) sample points are obtained from a normal distributed RV \\(W\\) , we obtain the sample \\(w\\) which consists of \\(n\\) realizations of \\(W\\) . If \\(n\\) is large, usually above 30, by the Law of Large Numbers (LLN) the mean of \\(w\\) or sample mean ( \\(\\bar{w}\\) ) is a good estimation of \\(\\mu_W\\) . Also for large values of \\(n\\) , again usually over 30, the standard deviation of \\(w\\) or sample standard deviation ( \\(s_w\\) ) is a good estimation of the standard deviation of the population ( \\(\\sigma_W\\) ) 1. One comparison To begin, let's assume the \\(H_0\\) is true, there is no difference between \\(\\mu_X - \\mu_Y\\) . Indeed, let's assume that \\(X\\) and \\(Y\\) follow the same distribution, the standard normal distribution \\(\\mathcal{N}(\\mu=0,\\sigma&#94;{2}=1)\\) . To test the difference between the population means , were are interested in the sampling distributions of the sample means . Thus, let's consider two new RVs: \\(\\bar{X}\\) and \\(\\bar{Y}\\) , which are the sampling distribution of the sample mean for the populations \\(X\\) and \\(Y\\) respectively. The mean and standard deviation of these sampling distributions of the sample means are: \\(\\mu_\\bar{X} = \\mu_X\\) (remember that \\(\\mu_X = \\bar{x}\\) ), and \\(\\sigma_\\bar{X} = \\sigma_X/n\\) (remember that \\(\\sigma_X = s_x\\) ). The same goes for \\(\\mu_\\bar{Y}\\) and \\(\\sigma_\\bar{Y}\\) . Now, lets have another RV called \\(Z = \\bar{X} - \\bar{Y}\\) . As \\(\\bar{X}\\) and \\(\\bar{Y}\\) are normally distributed, \\(Z\\) is also normally distributed with \\(\\mu_Z = \\mu_\\bar{X} - \\mu_\\bar{Y}\\) and \\(\\sigma&#94;2_Z = \\sigma&#94;2_\\bar{X} + \\sigma&#94;2_\\bar{Y}\\) . See link . The difference in \\(\\mu_X\\) and \\(\\mu_Y\\) will be considered significant if it has an occurring probability of 5% or less. As such from the normal distribution of \\(Z\\) , we can identify the standard score (or z-score) for this probability, this means that the difference is significant when is absolute value is larger than \\(1.96\\sigma_Z\\) . As 95% of the values are between - \\(1.96\\sigma_Z\\) and \\(1.96\\sigma_Z\\) . Probabilities and standard scores for normal distribution. All this is to say, just by chance there is a probability of 5% or less that the absolute difference between \\(\\mu_X\\) and \\(\\mu_Y\\) is larger than \\(1.96\\sigma_Z\\) . To verify this in the simulation, 10,000 samplings were done to \\(X\\) and \\(Y\\) , each sample consisting in 100 sample points. The graph below presents the theoretical probability density function (pdf) for \\(Z\\) , and the empiric pdf obtained from the simulation. Probability distribution for \\(Z\\) . Solid line: theoretical results. Shaded area: simulation results. Theoretical: \\(P(|Z|>1.96\\sigma_Z) = 0.05\\) Experimental: \\(P(|Z|>1.96\\sigma_Z) = 0.0475\\) So far so good, the null hypothesis is rejected around 5% of the time. But the problems start with multiple comparisons. 2. Two or more comparisons Again, let's assume the null hypothesis is true. Thus, in this scenario, each population ( \\(X\\) and \\(Y\\) ) is characterized by a set of two independent RVs, which have a standard normal distribution. As the variables are independent and normally distributed, the covariance matrix for \\(X\\) and \\(Y\\) is a diagonal full with the variance of variable, in this case 1. This is to say: \\(X = [X_1, X_2],\\) with \\(X_1\\sim \\mathcal{N}(\\mu_{X_1}=0,\\sigma_{X_1}&#94;{2}=1)\\) and \\(X_2\\sim \\mathcal{N}(\\mu_{X_2}=0,\\sigma_{X_2}&#94;{2}=1)\\) \\(Y = [Y_1, Y_2],\\) with \\(Y_1\\sim \\mathcal{N}(\\mu_{Y_1}=0,\\sigma_{Y_1}&#94;{2}=1)\\) and \\(Y_2\\sim \\mathcal{N}(\\mu_{Y_2}=0,\\sigma_{Y_2}&#94;{2}=1)\\) Let's follow the same approach as in the one-comparison section for each of the two comparisons: \\(X_1\\) vs \\(Y_1\\) and \\(X_2\\) vs \\(Y_2\\) . Let's define a third bivariate RV, \\(Z = [Z_1, Z_2]\\) with \\(Z_1=X_1-Y_1\\) and \\(Z_2=X_2-Y_2\\) . A difference in means would be considered significant if it has an occurring probability of of 5% or less; this means that the difference is significant when \\(|Z_1| > 1.96\\sigma_{Z_1}\\) OR \\(|Z_2| > 1.96\\sigma_{Z_2}\\) . The figure below shows the pdf of \\(Z\\) , with the marginal pdf for \\(Z_1\\) and \\(Z_2\\) . pdf of \\(Z\\) , marginal pdf for \\(Z_1\\) with \\(\\pm1.96\\sigma_{Z_1}\\) indicated as dotted red lines, and pdf for \\(Z_2\\) with \\(\\pm1.96\\sigma_{Z_2}\\) indicated as dotted red lines. The pdf for \\(Z\\) is a surface where the total volume under the surface is equal to 1. By analyzing the pdf of Z and the marginal pdfs for \\(Z_1\\) and \\(Z_2\\) , we can see that the box inside the red walls represents the probability that \\(|Z_1| < 1.96\\sigma_{Z_1}\\) AND \\(|Z_2| < 1.96\\sigma_{Z_2}\\) , as \\(Z_1\\) and \\(Z_2\\) are independent, this can be written as: \\(P(Z\\) is inside red box \\()\\) = \\(P(|Z_1| < 1.96\\sigma_{Z_1})\\) \\(P(|Z_2| < 1.96\\sigma_{Z_2})\\) \\(P(Z\\) is inside red box \\()\\) = \\(0.95*0.95 = 0.9025\\) This result can be rephrasing as: finding a significant result in \\(Z_1\\) OR \\(Z_2\\) , is equal to 1 minus the probability of not finding a significant results for \\(Z_1\\) nor for \\(Z_2\\) . Then the problem the multiple simultaneous comparisons is evident, as there is a probability of 9.75% of finding a significant result in \\(Z_1\\) or \\(Z_2\\) just by chance. Which is higher to the 5% probability deduced in the one comparison case. This is extended for \\(m\\) multiple comparisons as: \\(P\\) ( finding at least one significant result \\() = 1 - (1-\\alpha)&#94;m\\) The possibility of rejecting the null hypothesis, or finding a significant results just by chance, gets larger the more comparisons are performed simultaneously. To address this problem, a common method used is Bonferroni correction . In this method, the significance level is adjusted to compensate for the increment in the probability of finding at least one significant result. As such the corrected significance level is \\(\\alpha/m\\) for a desired significance level \\(\\alpha\\) in \\(m\\) multiple comparisons. Probability of finding at least one significant result. Uncorrected and Bonferroni-corrected for multiple comparisons. Getting back to the bivariate RV, the regions obtained by using the significance level \\(\\alpha\\) or \\(\\alpha/m\\) are shown below. The standard score (or z-score) for the corrected significance level \\(\\alpha/m\\) is 2.24. Moreover, the theoretical results are compared with the one from the simulation, where 10,000 samplings were done to \\(X\\) and \\(Y\\) , each sample consisting in 100 sample points. pdf of \\(Z\\) , marginal pdf for \\(Z_1\\) with \\(\\pm1.96\\sigma_{Z_1}\\) indicated as dotted red lines and \\(\\pm2.24\\sigma_{Z_1}\\) indicated as dotted green lines; and pdf for \\(Z_2\\) with \\(\\pm1.96\\sigma_{Z_2}\\) indicated as dotted red lines and \\(\\pm2.24\\sigma_{Z_2}\\) indicated as dotted green lines. Theoretical: \\(P(Z\\) is outside red box \\() = 0.0975\\) Theoretical: \\(P(Z\\) is outside green box \\() = 0.05\\) pdf of \\(Z\\) , marginal pdf for \\(Z_1\\) with \\(\\pm1.96\\sigma_{Z_1}\\) indicated as dotted red lines and \\(\\pm2.24\\sigma_{Z_1}\\) indicated as dotted green lines; and pdf for \\(Z_2\\) with \\(\\pm1.96\\sigma_{Z_2}\\) indicated as dotted red lines and \\(\\pm2.24\\sigma_{Z_2}\\) indicated as dotted green lines. Experimental: \\(P(Z\\) is outside red box \\() = 0.1053\\) Experimental: \\(P(Z\\) is outside green box \\() = 0.0552\\) I hope this post helps to understand better why it's important to take action when multiple comparisons are performed. References Multiple comparisons problem hy is multiple testing a problem? Bonferroni correction Normal distribution Central limit theorem Comparison of Two Means Unbiased estimation of standard deviation Comparing two means Sampling distribution Standard normal distribution, Z-score table Point estimation of the mean if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) { var align = \"center\", indent = \"0em\", linebreak = \"false\"; if (false) { align = (screen.width < 768) ? \"left\" : align; indent = (screen.width < 768) ? \"0em\" : indent; linebreak = (screen.width < 768) ? 'true' : linebreak; } var mathjaxscript = document.createElement('script'); mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#'; mathjaxscript.type = 'text/javascript'; mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML'; var configscript = document.createElement('script'); configscript.type = 'text/x-mathjax-config'; configscript[(window.opera ? \"innerHTML\" : \"text\")] = \"MathJax.Hub.Config({\" + \" config: ['MMLorHTML.js'],\" + \" TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } },\" + \" jax: ['input/TeX','input/MathML','output/HTML-CSS'],\" + \" extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js'],\" + \" displayAlign: '\"+ align +\"',\" + \" displayIndent: '\"+ indent +\"',\" + \" showMathMenu: true,\" + \" messageStyle: 'normal',\" + \" tex2jax: { \" + \" inlineMath: [ ['\\\\\\\\(','\\\\\\\\)'] ], \" + \" displayMath: [ ['$$','$$'] ],\" + \" processEscapes: true,\" + \" preview: 'TeX',\" + \" }, \" + \" 'HTML-CSS': { \" + \" availableFonts: ['STIX', 'TeX'],\" + \" preferredFont: 'STIX',\" + \" styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} },\" + \" linebreaks: { automatic: \"+ linebreak +\", width: '90% container' },\" + \" }, \" + \"}); \" + \"if ('default' !== 'default') {\" + \"MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {\" + \"var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;\" + \"VARIANT['normal'].fonts.unshift('MathJax_default');\" + \"VARIANT['bold'].fonts.unshift('MathJax_default-bold');\" + \"VARIANT['italic'].fonts.unshift('MathJax_default-italic');\" + \"VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');\" + \"});\" + \"}\"; (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript); (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript); }","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/06/19/multiple-comparisons-visual/","loc":"https://www.castoriscausa.com/posts/2020/06/19/multiple-comparisons-visual/"},{"title":"Developing a Desklet for Cinnamon","text":"In a previous post , the minimum code for a functional Cinnamon Desklet was provided. Based on that, I started to develop the System monitor graph which shows graphs for the level of activity in various system variables including: CPU, memory, and disks. This post describes some of the elements that I found important during the development of such a Desklet. System monitor graph Desklet. Setting tools As with many coding projects, the use of git or any other version control software is desirable to track and revert changes. The Developer's Tools Desklet was very helpful as it allows to restart Cinnamon with one click, display the Cinnamon console, among other actions. Printing in the Cinnamon console is often very useful 1 global . log ( 'Some text or variable goes here' ); Adding Settings The ability to configure a Deskelet is very important. This is reached by creating the settings-schema.json file besides the desklet.js file. The settings-schema.json contains the elements in the GUI that the user can modify, these include: text labels, switches, text boxes, color choosers. More info can be found here and here . To connect the Settings with your Desklet: Add Settings to the imports : 1 const Settings = imports . ui . settings ; Get the Setting values in the _init function of the Desklet, 1 2 this . settings = new Settings . DeskletSettings ( this , this . metadata [ \"uuid\" ], desklet_id ); this . settings . bindProperty ( Settings . BindingDirection . IN , \"background-color\" , \"background_color\" , this . on_setting_changed ); The arguments for bindProperty are: BindingDirection.IN changes in the settings go into the Desklet, background-color the element name in the settings-schema.json , and background_color name of the property to be created in the Desklet, it can be accesed as this.background_color . Adding refreshing Most Desklets need to be updated on a fix schedule, this action can be performed by adding a timer. Add Mainloop to the imports : 1 const Mainloop = imports . mainloop ; A way to use this timer is to split the update function of the Desklet in two: 1 2 3 4 5 6 update : function () { // updates the visuals in Desklet this . update_draw (); // calls this.update() in refresh_interval seconds this . timeout = Mainloop . timeout_add_seconds ( this . refresh_interval , Lang . bind ( this , this . update )); }, Additionally, if a update is required before the next interval, it can be forced. For example below removes the mainloop and intermediately calls this.update() when the Settings have been updated. Note that the timer is set again inside this.update() . 1 2 3 4 on_setting_changed : function () { Mainloop . source_remove ( this . timeout ); this . update (); }, Interacting with files and commands Often a Desklet needs to read a file or execute a command. For the first, the function get_file_contents_utf8_sync does the trick. Cinnamon has to be added to the imports . 1 let mem_out = Cinnamon . get_file_contents_utf8_sync ( \"/proc/meminfo\" ); To execute a program Subprocess can be used. Add Gio to the imports : 1 const Gio = imports . gi . Gio ; Indicate the command and its arguments, and retrieve the stdout to a variable: 1 2 3 4 5 6 let subprocess = new Gio . Subprocess ({ argv : [ '/bin/df' , '/' ], flags : Gio . SubprocessFlags . STDOUT_PIPE , }); subprocess . init ( null ); let [, out ] = subprocess . communicate_utf8 ( null , null ); If pipes are needed, it is possible call a bash shell and pass as the argument the commands with pipes, for example: 1 2 3 4 5 6 let subprocess = new Gio . Subprocess ({ argv : [ '/bin/sh' , '-c' , '/bin/df ' + '/' + ' | grep Filesystem -w -A1' ], flags : Gio . SubprocessFlags . STDOUT_PIPE , }); subprocess . init ( null ); let [, out ] = subprocess . communicate_utf8 ( null , null ); Drawing Cairo was used to draw all the visuals in my Desklet. The general idea is to create a canvas with Clutter, and use this canvas to add all the visual elements for the Desklet. For a working example, see the section // draws graph of the update_draw() function in the desklet.js for my Desklet. Wrap-up This was an entertaining project, and my first time using JavaScript. Some final tips that I learned from this were: * Once more, source control * Test any small change * Check the Errors printed in the Cinnamon console * Learn from other people's code, the source code for all the Deskets in Cinnamon spices is here .","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/06/09/system-monitor-graph-desklet/","loc":"https://www.castoriscausa.com/posts/2020/06/09/system-monitor-graph-desklet/"},{"title":"[Tutorial]: Making a Desklet for Cinnamon","text":"A good day I was going through the available Desklets for Cinnamon , looking for an desklet to display graphs about the current state of the system (CPU, RAM, disks, etc.), although I found the nice desklets such as Simple monitor system , CPU Load and Disk Space , none of them quite do what I need. Thus I resolved to develop the desklet. Because the information to develop a desklet is outdated 1 , I decided to document the process, this is the first part of that process. How to create a simple desklet. At the moment of writing, Cinnamon 4.4.8 on Arch Linux was used. 1. What is a desklet? \"Desklets are little programs which you can place on your desktop, on top of your desktop background\" 2 . Moreover, desklets as well as other graphical elements in Cinnamon are written in JavaScript 3 , and use the Cinnamon's JavaScript interpreter (CJS) 4 . More information about desklets can be find in the official repository https://github.com/linuxmint/cinnamon-spices-desklets . 2. Creating a simple desklet Ok, with the previous information in mind, here a simple desklet is created and explained. When finished, it should look like the image below. The files described in this section can be downloaded from here . First desklet, it prints \"Hello Desktop\" and can have multiple instances First of all, the desklets are located at ~/.local/share/cinnamon/desklets , where each desklet has its own directory. Then, create a directory with the name PROJECT@AUTHOR , this is the UUID of the desklet. For example first-desklet@rcassani A desklet requires at least two files: metadata.json : As it names indicates, this has the metadata for the desklet and additional options such as max-instances to allow multiple instances of the desklet. 1 2 3 4 5 6 7 8 { \"max-instances\" : \"10\" , \"uuid\" : \"first-desklet@rcassani\" , \"name\" : \"First Desklet\" , \"description\" : \"This is my first desklet\" , \"version\" : \"0.1\" , \"prevent-decorations\" : false } desklet.js : Here is where the JavaScript code for the desklet is. Below there is a simple functional desklet that adds a button on the desktop. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 const Desklet = imports . ui . desklet ; const St = imports . gi . St ; function MyDesklet ( metadata , desklet_id ) { this . _init ( metadata , desklet_id ); } MyDesklet . prototype = { __proto__ : Desklet . Desklet . prototype , _init : function ( metadata , desklet_id ) { Desklet . Desklet . prototype . _init . call ( this , metadata , desklet_id ); this . setupUI (); }, setupUI (){ // creates container for one child this . window = new St . Bin (); // creates a label with test this . text = new St . Label ({ text : \"Hello Desktop\" }); // adds label to container this . window . add_actor ( this . text ); // Sets the container as content actor of the desklet this . setContent ( this . window ); }, }; function main ( metadata , desklet_id ) { return new MyDesklet ( metadata , desklet_id ); } Constants are declared with const , and cannot be re-declared nor changed. First, the Desklet class is imported from .ui.desklet . The Shell Toolkit is imported at imports.gi.St; , it is a clutter -based toolkit that allows to add GUI elements to the desklet, St documentation can be found here . The function MyDesklet is the constructor for our desklet, it takes metadata (dictionary) with the metadata of the desklet, and desklet_id (int) which is the instance id of the desklet. Using MyDesklet.prototype allows us to add new methods to the object constructors. The method setupUI() contains the behaviour of the desklet, see comments in the code above. Note that it is called inside _init . Finally, the function main returns an instance of MyDesklet Next steps By this point there is a working desklet. The behaviour of the desklet still needs to be coded to have all the desired features, will be documented in a future post.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/05/12/cinnamon-desklet-development/","loc":"https://www.castoriscausa.com/posts/2020/05/12/cinnamon-desklet-development/"},{"title":"Identifying typewriter and how to use it","text":"Few years ago I found this typewriter in a flea market, without double thinking I got it, as it would be nice to have a working old typewriter. According to the seller, the typewriter was functional and a quick cleaning should be enough to use it, thus, I put it aside for \"later\". Fortunately, this later has come. Starting point. This post the is first post of a Series where I'm going to document the cleaning process. By the end, I should have a nice old typewriter in working conditions, or a at least and nice pictures of how I mess with it. Without further delay, the beginning of the journey. Identifying the typewriter Well, I'm ready to start to clean it. But I need (or at least I think) to know how it works in the big picture, the component parts, and how they work together. Thus step, tracking the model and manual. The typewriter's brand is Underwood , and has the serial number S11-5784XXX . The S makes reference to the Model S , indeed the look matches other typewriters from that model ( link ). The 11 just refers to the carriage lenght (11\"). And 5784XXX narrows the production date to 1945, between July and December (according to: database 1 and database 2 ). Searching for information, I found this amazing documents related to this specific model, and others that are similar: Principal Operative Parts of the Underwood Standard Typewriter Instructions for Using The Underwood Typewriter for Models 3, 4 and 5. Complete Instructions How to Repair Rebuild and Adjust Underwood Typewriters, 1920 Typewriter Maintenance TM37-305, 1944 Underwood Typewriter Maintenance and Repair, 1955 Diagrams about standard typewriter repair After reading some the user manuals, items 1 and 2 , I got the conclusion that the major parts of the typewriter are working well, although it seems to be a problem with the Variable Line Spacer Button, number 29 in the image below. The next step is to read the maintenance and repair to have a good idea from where to start. Principal Operative Parts of the Underwood Standard Typewriter.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/05/10/identifying-typewriter/","loc":"https://www.castoriscausa.com/posts/2020/05/10/identifying-typewriter/"},{"title":"Interactive Jupyter Notebook in static websites [Test]","text":"Without any question, Jupyter Notebooks are an amazing medium to present and share code, equations, graphics, among others. There are multiple ways to share them: as only view in GitHub or with nbviewer ; to fully interactive in Binder , where an the Notebook runs in an live environment. In this post, I tested the embedding of an interactive Jupyter Notebook in to this website. The interaction is achieved by using ipywidgets (Interactive HTML Widgets) in the Notebook. The steps to do this are described in this post: https://elc.github.io/posts/embed-interactive-notebooks/ . Finally, notes at the end of this post add more details for certain steps in the process. Result This is the embedded Jupyter Notebook . To use the widgets, click first on Show Widgets . The original one can be found as a Gist , and in function resizeIframe(obj) { obj.style.height = 350 + obj.contentWindow.document.body.scrollHeight + 'px'; } Notes The list of requirements for the Jupyter Notebook can be obtained by converting the notebook to a Python script with nbconvert , and the using pipreqs . 1 2 $ jupyter nbconvert --to script notebook_name.ipynb $ pipreqs . An iframe element is used to inserting the HTML file created with nbinteract to the static webpage. By default the height of the iframe element needs to be defiend before hand, however, it can be automatically adjusted to the size of its content by adding a javascript function to the onlad attribute of the iframe . As such, the HTML code to place in the static site is: 1 2 3 4 5 6 < iframe src = \"/htmls/notebook_name.html\" frameborder = \"0\" id = \"iframe\" onload = 'javascript:resizeIframe(this);' ></ iframe > < script language = \"javascript\" type = \"text/javascript\" > function resizeIframe ( obj ) { obj . style . height = obj . contentWindow . document . body . scrollHeight + 'px' ; } </ script > The height of the loaded HTML is usually smaller than the height of the HTML once the widgets are loaded. Thus, the height may need to be further adjusted depending on the type and quantity of widgets. To have a better presentation of the Notebook, I changed the the class container in the HTML file created with nbinteract to have a width of 100% .","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/04/15/interactive-jupyter-notebook/","loc":"https://www.castoriscausa.com/posts/2020/04/15/interactive-jupyter-notebook/"},{"title":"USB microscope and VLC","text":"This post is to show the type of images that can be obtained with an affordable USB microscope, similar to this one . The output image is 640 x 480 pixels, and the optical zoom is supposed to go from 50x to 500x. As the microscope has not adjustment for focus, for most of the samples I was able to focus them in unknown magnification settings, let's call them low- and high-zoom. In the technical side, as the microscope is detected as a standard webcam, it is possible to use VLC to capture the images and video, see further instructions here . In Linux, VLC relies on Video4Linux which is part of the kernel since 2.5.x. Note, the V4L2 module in VLC requires ZVBI , thus you may need also to install this library. Without further delay, these are the pictures from different objects at home: Surface-mount device (SMD) LED The real size is 3 mm by 1.5 mm Low zoom High zoom The 1-mm mark in a vernier caliper For the low-zoom pic, there are 154 pixels between the center of the marks, a rough resolution of 6.5 μm per pixel. And for the high-zoom pic, there are 570 pixels, thus around 1.8 μm per pixel. Low zoom High zoom Fish fossil It's common have a fossil of a fish at home, right?. The pictures correspond to the area near to the tail. Low zoom High zoom Display AMOLED (from Pixel 2) The \"1\" was around 2-mm tall on the display. Low zoom High zoom Escape mechanism Lastly, a close-up video of the escape mechanism in a watch.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/04/06/microscope-vlc-linux/","loc":"https://www.castoriscausa.com/posts/2020/04/06/microscope-vlc-linux/"},{"title":"Hook with systemd to disable wake-up from USB device","text":"Situation: When my laptop is in suspension with the lid open, any update (movement or clicks) with the wireless mouse wakes-up the laptop. This post is about creating a systemd unit, and hook it to the start of the sleep unit, and disable the mouse as wake-up device. This approach should work for any Linux distribution using systemd , this post was written in a Arch Linux system. First, the list of devices that can wake-up the computer can be find with: 1 $ grep enabled cat /proc/acpi/wakeup From this list, it can be seen that the culprit device is XHC , which is a USB 3.0 (XHC) chip. The listed devices can be toggled to disabled with the folliwing command: 1 # echo XHC > /proc/acpi/wakeup This has to be as root, if sudo does not work, use sudo su and run the command. Unfortunately, any change performed in /proc/acpi/wakeup is reset at booting, and it depends of the BIOS, thus cannot be change permanently. Thus, one approach to avoid wake-up by this device, is to disable it every time the systems goes to suspension, and this can be done with a hook. This hook can be done in two ways: Placing an executable in /usr/lib/systemd/system-sleep , all executables in this path will be run before suspending or hibernating the system. Creating a systemd unit in /etc/systemd/system and hook it to the sleep unit. The second method is preferred as /etc/systemd/system overrides any other units, and the path /usr/lib/systemd/system should be used only for units generated by the distribution package manager. More info in Here and Here . These are the instructions for the 2nd way: Identify the culprit device in /proc/acpi/wakeup That device will be disabled from the wake-up list each time the computers goes to suspension Create a file suspend-mouse-fix.service in /etc/systemd/system with this content: 1 2 3 4 5 6 7 8 9 10 11 12 13 [ Unit ] Description = Disables wake-up from device XHC # the service runs before the computer goes to sleep Before = sleep.target [ Service ] Type = simple # check XHC is enabled, if so, toggle it to disabled ExecStart = /usr/bin/bash -c \"if [[ $( cat /proc/acpi/wakeup | grep XHC | awk '{print substr($3,2); }' ) == enabled ]]; then echo XHC|tee /proc/acpi/wakeup; fi\" [ Install ] # this does the hook to sleep.target WantedBy = sleep.target Some important points: services run root unless a User is indicated in the [Service] section services files are not shells, thus the syntax ExecStart Change the permissions of the service file 1 # chmod 664 /etc/systemd/system/suspend-mouse-fix.service Enable the service: 1 systemctl enable suspend-mouse-fix.service If there any update in the service file, run $ systemctl daemon-reload after modifying it Lastly, the status and last calls of the service are obtained with $ systemctl status suspend-mouse-fix.service . And this information can be also found with $ journalctl","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/03/09/hook-systemd-disable-wakeup-from-usb-device/","loc":"https://www.castoriscausa.com/posts/2020/03/09/hook-systemd-disable-wakeup-from-usb-device/"},{"title":"PhD Thesis Summary","text":"In November 2018, I performed my PhD defense, this is a summary of it. The title is \"Towards an Automated Portable EEG-based System for Alzheimer's Disease Diagnosis\", and it can be found in its integrity here . The defense slides are available here Contents: Challenges for EEG-based Alzheimer's disease diagnosis Thesis contributions. 1. Towards automation 2. Exploring Portable 3. Exploring novel features Conclusion References Challenges for EEG-based Alzheimer's disease diagnosis The term dementia is used to encompass a number of neurodegenerative disorders that have their origin in damage and death of neurons. In 2015, 46.8 million people were living with dementia and this number is projected to grow to 74.7 million by 2030, and to 131.5 million by 2050, this trend is driven by population growth and demographic ageing. Among the disorders classified as dementia, Alzheimer's disease (AD) is the most common which accounts for nearly 70% of the cases. Frequently AD is diagnosed with exhaustive neuropsychological examinations, and the diagnosis is supported by biomarkes from cerebospinal fluid and neuroimaging techniques. Unfortunately, these supporting biomarkers are invasive, expensive and geographically confined. In the last two decades, EEG -based biomarkers have emerged as a promising tool in the study of AD, as EEG is non-invasive, less expensive and potentially portable. EEG signals are consists of recording changes in the electrical potential measured at the scalp with electrodes. And their origin is the electrical activity evoked by synchronous activation of thousands of neurons with similar spatial orientation (dipoles). Thus, EEG biomarkers can be used to infer neuronal degeneration and decay in the number of synapses caused by AD progression [1] . However the use of EEG for AD diagnosis presents two major challenges: (i) EEG signals are subject to interference from other signals (artifacts), and (ii) the need for large number of electrodes, often 16+, thus making them hard to transport and expensive to fund, specially for low- and middle-income countries. Thesis contributions. In my doctoral thesis, the steps towards the development of an automated portable and low-cost EEG-based system for AD diagnosis were presented: 1. Towards automation Explore the effects of automated artifact handling algorithms in the pre-processing or EEG signals 2. Towards portability Explore the potential of portable devices in EEG signal acquisition 3. New modulation-domain features : Propose new EEG features based on the modulation representation, not-defined with traditional EEG-band limits General structures of an EEG-based AD diagnosis system 1. Towards automation To remove the need for expert human intervention, we explored the effects of several fully automated artifact handling algorithms on EEG signals and gauge their advantages and disadvantages for automated AD diagnosis. Overall the classification performance obtained using automated artifact handling was in line with the performance obtained with systems based on \"artifact-free\" EEG data manually selected by human experts. Such findings suggest that manual inspection of the EEG signals can be avoided by using automated artifact removal, thus making faster the process and improving reproducibility [2] . 2. Exploring Portable To explore the potential of portable low-density devices, we explored the differences in performance for AD diagnosis obtained with a 20-channel and 7-channel EEG system. The reduction in the number of electrodes, led to a decrease in AD diagnosis performance. This could be attributed to the fact that a higher density layout presents a broader spatial distribution on the scalp; thus it can register cortical activity from other regions such as temporal and occipital lobes. In addition, a higher density coverage may be able to pick up spatially broad activities caused by deep brain structures, which are the first-affected by AD progression. However, further exploration is needed regarding the low-density electrode layout, as a limitation in our experiments, was that the layout pre-defined by experimental protocol from a different EEG dataset, thus this may not be optimal for AD diagnosis using resting-state EEG [3] . 3. Exploring novel features Lastly, EEG-based AD diagnosis has relied on conventional EEG features. Here, a new class of features derived from the modulation spectrogram from the EEG signal, which aims to characterize the second order periodicity of the signals. In the modulation domain, differences between normal aging subjects and subjects with AD are visible and defined in different regions of the modulation spectrogram. The features from this representation shown to (i) provide improved robustness against artifacts, (ii) potentially bypass the need for a separate artifact removal step, and (iii) provide better discriminatory information not only for AD diagnostic purposes, but also for disease progression monitoring. Results showed that the proposed features can be more reliable for EEG-based AD diagnosis. Also, we explored these new features with a 7-channel EEG layout showing that the obtained performance is in line with the one obtained with 20 channels [4] . Conclusion Unfortunately, the use of EEG in the clinical practice is not currently part of the routine in the diagnosis and monitoring of AD. In this thesis work we identified, discussed and propose solution to the major challenges of the utilization of EEG for the study of AD. It is hoped that the innovations presented in the thesis work will boost the research and clinical use of EEG as a non-invasive, less expensive and potentially portable technique for the diagnosis and monitoring of AD. References [1] R. Cassani, M. Estarellas, R. San-Martin, F. J. Fraga, and T. H. Falk, \"Systematic Reviewon Resting-State EEG for Alzheimer's Disease Diagnosis and Progression Assessment,\"Disease Markers, vol. 2018, 2018. [2] R. Cassani, T. H. Falk, F. J. Fraga, P. A. M. Kanda, and R. Anghinah, \"The effects ofautomated artifact removal algorithms on electroencephalography-based Alzheimer's diseasediagnosis,\"Frontiers in Aging Neuroscience, vol. 6, p. 55, 2014. [3] R. Cassani, T. H. Falk, F. J. Fraga, M. Cecchi, D. K. Moore, and R. Anghinah, \"Towardsautomated electroencephalography-based Alzheimer's disease diagnosis using portable low-density devices,\"Biomedical Signal Processing and Control, vol. 33, pp. 261–271, Mar.2017. [4] R. Cassaniand T. H. Falk, \"Alzheimer's Disease Diagnosis and Severity Level DetectionBased on Electroencephalography Modulation Spectral ‘Patch' Features,\" inIEEE J. Biomed.Health Inform., pp. 1–1,2019.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/02/28/phd-thesis-summary/","loc":"https://www.castoriscausa.com/posts/2020/02/28/phd-thesis-summary/"},{"title":"Password management with Dropbox and KeePassXC","text":"unsplash-logo Samantha Lam Nowadays we have to handle an enormous quantity of passwords. As it is not desirable to reuse passwords, nor to write down, it is necessary to have a way manage them. My must- and nice-to-have list was: Encrypted passwords Passwords need to be always available, not depend on cloud storage Being able to access them from different OS Open-source software for encryption Synchronization among unlimited devices After research and thinking in advantages and drawbacks among the different methods, I came to the solution of using an offline password manager ( KeePassXC ) and service to synchronize files ( Dropbox ). KeePassXC is an open-source cross-platform password manager that has has support for Windows, Linux, macOS. Although the there is not official, KeePassXC uses a database format that can be read and written with other Android and iOS apps . To set up this password management strategy just: Created a database with KeePassXC, and select a strong password for it. This password must be memorable as it should not be stored in any place but in your head. Place the KeePassXC database file in a Dropbox folder. This will keep it synchronized in all your Dropbox devices. This approach has worked very nice in my case, although it presents disadvantages such as: If the master password for the database is lost, all the passwords are locked. In March 2019, Dropbox put a limit of 3 devices for Basic (free) users, and two different OS in the same computer count as two devices.","tags":"posts","url":"https://www.castoriscausa.com/posts/2020/01/28/password-management-with-Dropbox-and-KeePassXC/","loc":"https://www.castoriscausa.com/posts/2020/01/28/password-management-with-Dropbox-and-KeePassXC/"},{"title":"[Review]: The Seven Secrets of How to Think Like a Rocket Scientist","text":"The Seven Secrets of How to Think Like a Rocket Scientist by Jim Longuski , is one of the books that have enjoyed the most. The book is not a text book with theory and equations, (the What ), in rocket science; but rather the presents in an organized way approaches and methods, (the How ), that rocket scientists follow to approach the challenges of their endeavour. Despite the title, the book is written in an elegant but simple English that aims for the general public. In the same sense that knowing how the most acclaimed chefs prepared their dishes can improve anyone's cooking; anyone's skills to solve problems in the daily life can be improved by applying some of the methods presented in the book. The book has a section for each of the seven secrets (Dream, Judge, Ask, Check, Simplify, Optimize and Do); and each section is divided in brief chapters that present a concrete concept / methods, which is very often accompanied by anecdotes that make crystal clear the importance of such method. Among the ones that I use / remember the most is the KISS (Keep It Simple, Stupid) principle. As the cherry on the cake, at the end of the book, the author provides a distilled list of related reading material, as well as sci-fi. P.S. Be aware that the author makes very clear his position towards the space shuttle program.","tags":"posts","url":"https://www.castoriscausa.com/posts/2019/04/21/comm-tssohttlars/","loc":"https://www.castoriscausa.com/posts/2019/04/21/comm-tssohttlars/"},{"title":"Vampire (electronic) devices","text":"Image from: Link An energy vampire device is the one that consumes electric energy anytime is plugged, even when it is not in use, one of the most common examples nowadays are chargers. Let's first define electric energy consumption. Electric energy consumption Electric energy consumption is measured as a number in kilowatt hour (kWh), and it's obtained by adding the product of device power, given in Watts (W), by utilization time in hours (h). For example, using one 100 W light bulb during 1 hour results in a consumption of 0.1 kWh, if the same bulb is used during 10 hours, the consumption is 1 kWh. On the other hand, in the case of a 'powerful' appliance as a standard microwave, with a typical power of 1500 kW, the energy consumption may not be as high as it used only in short periods. The unit kWh describes the quantity of work performed, thus it has an equivalent in work (or energy) units, which are Joules [J]. The equivalence is the following: 1 kWh is 1000 W times 3600 seconds. Thus, 1 kWh = 3.6 megajoules. Indeed, kWh is the unit that appears in the electricity receipt. Watts are always defined as Joules per second (J/s), no matter how they are calculated; in the case of electric power, it is calculated as the product of voltage times electric current, this is to say: P = E·I . Voltage ( E ) is given in Volts (V), which are defined as work per unit charge, this is: [Volt] = [Joules / Coulomb]. On the other hand, electric current ( I ), is measured in Amperes, and indicates the quantity of charge per second, thus [amp] = [Coulomb / second]. Therefore power ( P ) is [Watts] = E[Volts] x I[Amps] = E[Joule/Coulomb] x I[Coulomb/second] = P[Joules/second]. After this brief dimensional analysis , let's go back to the vampire devices. How much energy do they consume? Let's make the calculation for one smartphone charger, assuming it has a 'vampire' power is 0.26W (this is often reported by the maker), in a month (considering it's in vampire-mode 20 hours per day) the energy vampire consumption is 0.26[W] x 30[day] x 20[hour/day] = 156 Wh or 0.156 kWh, how much consumption is this? Sticking with the microwave example, the consumption is equivalent to use the microwave for over 6 minutes. How much do vampire devices contribute to the electricity bill? Assuming a price of 12.73cents of USD (USA average price) per kWh, the charge for 0.156 kWh results is 0.02 USD (2 cents) per month. While this seems small, remember that there are many vampire devices at on, and some consume more than others, for example an unused laptop charger in the same conditions (20hrs vampire mode), will lead to a cost of 33 cents per month.","tags":"posts","url":"https://www.castoriscausa.com/posts/2019/03/06/energy-vampire-devices/","loc":"https://www.castoriscausa.com/posts/2019/03/06/energy-vampire-devices/"},{"title":"LinuxMint-19 + GTX1060 + CUDA 10.2","text":"Updated This article was updated to Mint 19 (based in Ubuntu 18.04), NVIDIA-driver 410 and CUDA driver 10.0 There are several posts with instructions for properly installing NVIDIA drivers in Linux . Unfortunately, sometimes they're outdated, moreover it's not possible to cover the immensity of system configurations. After searching and reading some of that information, I came down to this guide for my system ( Mint19 in MSI-GE62VR ) * . The guide consists of two parts: Install NVIDIA drivers Install and test CUDA drivers. * Similar steps should apply for other dual monitor setups in Ubuntu and Ubuntu-based distributions. System: MSI GE62VR Operative System Linux Mint 19 64-bit (Cinnamon) Hardware NVIDIA GTX 1060 Intel HD Graphics 530 (integrated GPU) 1 Install NVIDIA driver If the laptop's screen and external screen are working properly go to the CUDA section. It seems that common problems at installing NVIDIA drivers in Mint (and Ubuntu) are: the laptop's monitor is disabled when a external monitor is connected; or Cinnamon crashes in \"fallback mode\" when the system boots without external the monitor. So far the solution that worked for me, is to change to Nouveau drivers, purge any NVIDIA remaining and perform a clean NVIDIA installation Open the Driver Manager , and verify that the utilized drivers are the Nouveau display driver (change, and apply changes if necessary). Reboot your system. Once in Nouveau driver, purge the NVIDIA drivers 1 $ sudo apt-get purge nvidia* Unplug the DigitalDisplay adapter Add the following repository to find the most recent drivers 1 2 3 $ sudo add-apt-repository ppa:graphics-drivers/ppa $ sudo apt-get update $ sudo apt-get upgrade Open the Driver Manager select the recommended NVIDIA binary driver (nvidia-410 at January-2019) Restart your system The system should boot using the laptop's monitor as normally Connect the external monitor with the DigitalDisplay adapter Open Display to configure the position and behaviour of the monitors Open NVDIA X Server Settings to configure the external monitor 1A Problems at turning off NVIDA GPU with prime-select command If while using the NVIDIA drivers, the screen works fine but the prime-select command cannot turn off the NVIDIA GPU, thus changing to the intel GPU does not save power. Try the following. After installing, disable the nvidia-fallback service: 1 $ sudo systemctl disable nvidia-fallback.service Blacklist nouveau driver using GRUB config. In /etc/default/grub look for a line GRUB_CMDLINE_LINUX . Add nouveau.blacklist=1 into that parameter. If the line is not present add this line GRUB_CMDLINE_LINUX=\"nouveau.blacklist=1\" If you are interested for power savings (for laptops with dual GPU and your system supports it): install bbswitch-dkms 1 $ sudo apt install bbswitch-dkms Configure the system to load it by appending bbswitch in /etc/modules Now, to switch to Intel graphics run 1 $ sudo prime-select intel To use NVIDIA (for external display etc) 1 $ sudo prime-select nvidia 2 Install and Test CUDA driver Once the NVIDIA driver are properly installed, it's time to install the CUDA driver . If you're not sure what's the CUDA driver check this link Download the CUDA driver Follow the instructions to download and install the CUDA driver Installation parameters. Select NO when the CUDA installer ask to install NVIDIA Accelerated Graphics Driver for Linux as the NVIDIA driver is already installed. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 =========== = Summary = =========== Driver: Not Selected Toolkit: Installed in /usr/local/cuda-10.2/ Samples: Installed in /home/cassani/ Please make sure that - PATH includes /usr/local/cuda-10.2/bin - LD_LIBRARY_PATH includes /usr/local/cuda-10.2/lib64, or, add /usr/local/cuda-10.2/lib64 to /etc/ld.so.conf and run ldconfig as root To uninstall the CUDA Toolkit, run cuda-uninstaller in /usr/local/cuda-10.2/bin Please see CUDA_Installation_Guide_Linux.pdf in /usr/local/cuda-10.2/doc/pdf for detailed information on setting up CUDA. ***WARNING: Incomplete installation! This installation did not install the CUDA Driver. A driver of version at least 440 .00 is required for CUDA 10 .2 functionality to work. To install the driver using this installer, run the following command, replacing <CudaInstaller> with the name of this run file: sudo <CudaInstaller>.run --silent --driver*** Prepare the CUDA environment by adding the following 3 lines to your .bashrc file 1 2 3 export CUDA_HOME = /usr/local/cuda export LD_LIBRARY_PATH = /usr/local/cuda/lib64: $LD_LIBRARY_PATH export PATH = /usr/local/cuda/bin: $PATH And source it 1 $ source ~/.bashrc Verify Cuda Compiler driver 1 2 3 4 5 6 $ nvcc --version nvcc: NVIDIA ( R ) Cuda compiler driver Copyright ( c ) 2005 -2019 NVIDIA Corporation Built on Wed_Oct_23_19:24:38_PDT_2019 Cuda compilation tools, release 10 .2, V10.2.89 Install g++ (If you haven't) 1 2 3 $ sudo apt-get install g++ $ sudo apt-get install build-essential $ sudo apt-get install make (Optional) Install additional libraries to be able to build most of the samples: 1 $ sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev Building the samples Several of the samples require GL libraries , to find the correct path for those libraries, the file fingllib.mk is used. As Linux Mint is not an officially supported distribution a slight change is necessary in the fingllib.mk file. To avoid editing all instances of this file, its multiple copies will be replaced with a symbolic link. Go to /common folder in the samples path 1 $ cd /usr/local/cuda/samples/common Open fingllib.mk and, in the line 58 change ubuntu for 'ubuntu\\|linuxmint' Do not forget the simple quotes Search for all the instances of fingllib.mk outside of /common and replace them with a symbolic link to usr/local/cuda/samples/common/fingllib.mk . 1 2 $ cd /usr/local/cuda/samples/common $ sudo find .. ! -path \"*/common*\" -name findgllib.mk -exec ln -sf /usr/local/cuda/samples/common/findgllib.mk {} ';' Run the commnad make while in the samples path 1 2 $ cd /usr/local/cuda/samples $ sudo make Running the sample binaries Go to the sample binaries folder 1 $ cd /usr/local/cuda/samples/bin/x86_64/linux/release Verify that your CUDA Capable device is found 1 2 3 4 5 6 7 8 9 10 11 12 $ ./deviceQuery ./deviceQuery Starting... CUDA Device Query ( Runtime API ) version ( CUDART static linking ) Detected 1 CUDA Capable device ( s ) Device 0 : \"GeForce GTX 1060\" CUDA Driver Version / Runtime Version 10 .2 / 10 .2 CUDA Capability Major/Minor version number: 6 .1 ... Sample fluidsGL 1 $ ./fluidsGL References http://blog.csdn.net/kernlen/article/details/53882490 http://blog.csdn.net/wopawn/article/details/52302164 http://blog.csdn.net/lee_j_r/article/details/52693724 http://www.voidcn.com/blog/u010696366/article/p-3712151.html http://stackoverflow.com/questions/34617236/cuda-missing-libgl-so-libglu-so-and-libx11-so https://www.pugetsystems.com/labs/hpc/NVIDIA-CUDA-with-Ubuntu-16-04-beta-on-a-laptop-if-you-just-cannot-wait-775/ http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4Y9Whzcjf https://devtalk.nvidia.com/default/topic/936429/-solved-tensorflow-with-gpu-in-anaconda-env-ubuntu-16-04-cuda-7-5-cudnn-/ http://developer.download.nvidia.com/compute/cuda/6_5/rel/docs/CUDA_Getting_Started_Linux.pdf https://forums.linuxmint.com/viewtopic.php?t=226145 https://medium.com/@agathver/nvidia-gpu-optimus-prime-and-ubuntu-18-04-woes-f52e7f850f3d","tags":"posts","url":"https://www.castoriscausa.com/posts/2019/01/31/ge62vr-mint-gtx1060/","loc":"https://www.castoriscausa.com/posts/2019/01/31/ge62vr-mint-gtx1060/"},{"title":"Revamping Emotiv Epoc","text":"The Emotiv Epoc is a 14-channel EEG headset that brought the concept of affordable wireless EEG to the general public, paving the road for later portable EEG systems. It has been used for in several studies . Unfortunately, the Epoc presents two characteristics that make some experiments unpractical. (1) The electrode placement , fix as it is, forbids locating electrodes on some interesting scalp places for certain EEG, for example on the central line. (2) The technology of the electrodes , the contact between the electrode and scalp is mediated by sponges that need to be wet with saline solution, thus for long recordings (>1 hr), the solution starts to dry affecting the quality of the EEG signals. After some years of use at our laboratory, the MuSAE Lab , the structure that holds the Epoc arms as one piece got broken. While this condition could be fixed, we opted to follow the approach taken by Stefan Debener in the 2012 paper How about taking a low-cost, small, and wireless EEG for a walk? , this is to say, to remove the electronics from the EEG headset and give it a new (and more practical) case. Emotiv Epoc. In the red the part that was broken. Beside the new casing: The original battery was replaced by a 3.7V @ 1100mAh battery , with a size 4 x 37 x 59 mm (important to the case design). The EEG headset cables were replaced by cables ended in the DIN (touch-proof) connectors to support different standard electrode models. 3.7V 1100mAh battery EEG DIN (touch-proof) cables The vamping process consisted of four parts: Striping the electronics from the Epoc Soldering the new battery and electrode cables Placing everything in the new case 1. Striping the electronics This part was performed by Liviu Ivanescu , here some of the pictures. Additional photos on the Epoc interior can be found here and in this report . 2. Replacing the battery and electrode cables The soldering part is the most crucial, as screwing it screws the EEG device that was working (however it was not useful with the broken structure). Note that thru-hole pads for the cables interconnect the top and bottom layer of the PCB, i.e. they are Thru-hole Vias , thus it is not needed to pass the cables through the hole, a surface soldering will be enough to assure a good electric contact. Surface soldering. 3. Place everything in a new casing The approach for the case was 3D printing, the models was designed in Tinkercad as publicly available here . It 3D printed at District3 . Tinkercad model Placement of components Final result, a Canadian looney ($1) with a 26.5 mm diameter as reference. To keep the the elements in its place I used segments of silicone bars, which happened to be very useful for that purpose. To take the cables out of the box, a rubber wiring grommet was used. Finally a quick road test, Epoc in its new case + a bucket of salt water + ECG signal. Conclusion The hole process of tuning up the Epoc was a great experience, and I hope this post can help others in repairing and / or improving their own Epoc devices.","tags":"posts","url":"https://www.castoriscausa.com/posts/2017/09/16/emotive-epoc-hack/","loc":"https://www.castoriscausa.com/posts/2017/09/16/emotive-epoc-hack/"},{"title":"Linux freezes when changing GPU with prime-select [Solved]","text":"A frequent problem in dual-GPU systems is that the PC freezes ( kernel panic ) when you try to logout, restart or shutdown after changing back from the Intel (integrated) to the NVIDIA (discrete) GPU in Linux. All of this when you're using the NVIDIA drivers (proprietary drivers). When using the NVIDIA drivers for Linux, it's possible to change the GPU in use with the prime-select command followed by logout. Switching from NVIDIA to Intel GPU works perfectly: 1 $ sudo prime-select intel Then logout and login to see the changes. By changing to the discrete GPU power consumption drops almost by half, providing a decent battery life in laptops. However, the kernel panic occurs when switching back from the Intel to NVIDIA GPU. 1 $ sudo prime-select nvidia After changing the GPU with prime-select , either logout, restart or shutdown will result in kernel panic. Solution The problem is likely to be cause by ACPI configuration in the kernel boot sequence. It can be solved by adding the following to the kernel boot sequence: acpi_osi=! acpi_osi=\"Windows 2009\" This can be done by editing the kernel boot parameters , or more convenient and easier with the help of GrubCustomizer . After than change you should be able to logout correctly after changing from the Intel to the NVIDIA GPU. References https://bugs.launchpad.net/lpbugreporter/+bug/752542/comments/793 https://github.com/Bumblebee-Project/Bumblebee/issues/764#issuecomment-234494238","tags":"posts","url":"https://www.castoriscausa.com/posts/2017/08/29/freezes-linux-gpu-acpi/","loc":"https://www.castoriscausa.com/posts/2017/08/29/freezes-linux-gpu-acpi/"},{"title":"Universal Shortcut","text":"This project started from the \"need\" of having a compatible way to point to files indifferently if on Windows or Linux. While both operative systems can handle symbolic links, when the target file is an executable, certain scripts and programs present problems when executed through a symbolic link , as the working directory is expected to be the directory containing the executable and not the directory with the symbolic link. For that reason, a different approach was taken. To create an hybrid script with Bash and Batch code to point to the desired files or program. This kind of script is possible by using the commenting format of Batch files to ignore the Bash commands . In this sense such files can are universal shortcuts . As the paths utilized in this universal shortcut file, are relative, it works perfectly with portable media, if and only if, the filesystem supports file permissions. Note: FAT32 does not support them. The universal shortcuts consist of an executable script file with Bash and Batch code. When executed in Windows the Bash part is ignored and when executed in Linux the Batch part is ignored. Thus, the same script can be executed in both systems and performs the same action. The scripts in bash and batch are equivalent and they do: Change the current directory to the directory where the target file is Open the target file in a similar way as when the user double clicks it, this operation depends on the Desktop Environment utilized Exit The universal shortcut is created by a Python 3 script that can be found in this repository: https://github.com/rcassani/universal-shortcuts Usage 1 $ python3 mk_unishortcut.py <targetpath> the <targetpath> can be absolute or relative, and can be a file or directory When the Python script is executed in Linux it will automatically change the file permissions of the shortcut file to be executable. If the Python script is run in Windows, it is needed to change the file permissions to executable in Linux. Despite the fact these universal shortcuts may not be extremely useful, this project was an interesting experience in writing hybrid Bash-Batch scripts. References: Symbolic links fail to run executable files when they need to run in their folder https://askubuntu.com/questions/541317/link-to-exe-doesnt-launch-wine Hybrid Windows-bash and Linux-bash scripting https://stackoverflow.com/questions/17510688/single-script-to-run-in-both-windows-batch-and-linux-bash Identify Linux Desktop Environment https://github.com/alexeevdv/dename/blob/master/dename.sh start command in Windows https://technet.microsoft.com/en-us/library/cc770297(v=ws.11).aspx Link with different Desktop Environments https://renewablepcs.wordpress.com/about-linux/kde-gnome-or-xfce/","tags":"posts","url":"https://www.castoriscausa.com/posts/2017/07/25/universal-shortcuts/","loc":"https://www.castoriscausa.com/posts/2017/07/25/universal-shortcuts/"},{"title":"Full Linux installation in USB, supporting UEFI-boot","text":"This post is about creating a UEFI-bootable full Linux installation in a USB Flash Drive or External HDD. For sake of simplicity, I'll refer to a USB Flash Drive or a USB External HDD as USB-disk . This procedure is performed in a computer running Windows without installing Linux in the HDD, therefore there is no modification (nor mess) in the Windows EFI partition. Here a nice explanation on how UEFI boot works . First of all, if you're looking for Live-USB with or without Persistence with both Legacy and UEFI boot, a nice option in Windows is LinuxLive USB Creator . These are the differences between Live-USB with Persistence and a USB Full Install . Process Big Picture The procedure comprehends three main parts: Creating UEFI-booting Virtual Machine, without (virtual) HHD Installing Linux in the USB-disk Modifying the EFI partition in the USB-disk Requirements VMware installed The Workstation Player version is free for non-commercial use USB-disk , USB3 if your computer supports it I've tried the procedure with both USB Flash Drive and External HDD ISO image of your favorite Linux distribution For the following steps an ISO image of Linux Mint 18.1 64-bit was used, similar instructions should apply for other distributions. Procedure: 1. Creating UEFI-booting Virtual Machine, without (virtual) HHD Open VMware and Create a New Virtual Machine Select the I will install the operative system later option. Click on Next Set Guest Operating System to Linux, select your version or the closest one, in my case the closest to Mint 64-bit is Ubuntu 64-bit . Click on Next Assign a Virtual machine name and Location to the Virtual Machine. Remember these fields, and they'll used later. Click on Next Disk Capacity , default parameters (this HDD will not be used). Click Next Click on Customize Hardware For the New CD/DVD (SATA) , Select Use ISO image file and browse for your Linux ISO image For the USB Controller , Select USB 3.0 (if supported), [X]Automatically ..., [ ]Show all... and [ ]Share Bluetooth... Before completing the wizard, identify the Location of the Virtual Machine. Click on Finish . Do not power ON the Virtual Machine yet. Go to the Virtual Machine Location , and with help of a text editor (e.g. Notepad), open the file VMname.vmx (where the VMname is the Virtual machine name assigned in step 4). And add the line firmware = \"efi\" at the end of the file In VMware , open the settings of your brand new Virtual Machine and remove the HDD 2. Installing Linux in USB-disk In the step, the Virtual Machine will boot in UEFI using the Linux ISO image, from there it'll possible to install Linux in the USB-disk. In VMware , Power ON the Virtual Machine. When booting on UEFI, it should look as below (at least for Mint 64-bit ). Select Start Linux Mint 18 Cinnamon 64-bit (or Try Ubuntu without installing ) Once the Linux session is started, connect (physically) your USB-disk, and be sure it's connected to the Virtual Machine To start the procedure with a blank USB-disk. In the Virtual Machine, Open GParted (hopefully is installed). Then select your device at the upper right corner (remember its sdx ), then go to Device > Create Partition Table , select the type gtp . Close GParted. Click on the Install Linux (Mint) icon on Desktop. Select your language. Leave unchecked the option Install third-party software... In Installation type select Erase disk and install Linux Mint One the installation is done, select Continue Testing 3. Modifying the EFI partition in the USB-disk Still in the Linux session (Virtual Machine without HDD booted with Live-CD) from the previous section, the remaining part is to prepare the EFI partition on the USB-disk to make it UEFI-bootable Create a folder /mnt/efi/ :::powershell $ sudo mkdir /mnt/efi/ Mount the EFI partition in the recently created folder. Change sdx for the corresponding to your USB-disk (step 4 in previous section) 1 2 $ sudo mount / dev / sdx1 / mnt / efi $ cd / mnt / efi / EFI Copy the ubuntu folder to the same location with the name BOOT 1 $ sudo cp -r ./ ubuntu / ./ BOOT / Finally, copy the file BOOTx64.EFI from to the Linux ISO image to the BOOT folder in EFI partition of the USB-disk 1 $ sudo cp / media / cdrom / EFI / BOOT / BOOTx64 . EFI ./ BOOT / Shut down the Virtual Machine properly. Congratulations, now your USB-disk should be UEFI-bootable Finally, reboot your computer, and select the USB-disk (Partition 1) for UEFI boot. I've try this method using an external SSD via USB and a Lexar USB flash drive without issues.","tags":"posts","url":"https://www.castoriscausa.com/posts/2017/01/31/linux-usb-uefi/","loc":"https://www.castoriscausa.com/posts/2017/01/31/linux-usb-uefi/"},{"title":"Keeping Synaptics Touchpad disabled","text":"Touchpads in laptops are not for everyone, one of the first things to do when a I get a new computer is to plug a mouse and disable the touchpad (TP). Few weeks ago, I noticed a strange behavior, in my laptop , every time I started a session in Windows, the touchpad was enabled , that is to say it did not keep its previous status. The touchpad is a Synaptics SMBus TouchPad . As this behavior was annoying , something needed to be done. After some research I came across this wonderful solution where the touchpad is automatically disabled when a mouse is detected . Unfortunately, the Steelseris Keyboard in my laptop is detected as keyboard-mouse combo , then, the auto-disable, would permanently disable the touchpad, without option to enable it and who knows it could be useful (someday). Touchpad and Keyboard in GE62VR Later, after diving in Windows Register , with Regedit, I noticed a value, in two keys, that controls the touchpad's behavior at the beginning of the Windows session: DisableDeviceUntilSessionEnd in HKEY_CURRENT_USER\\SOFTWARE\\Synaptics\\SynTP\\TouchPadPS2TM3163 HKEY_CURRENT_USER\\SOFTWARE\\Synaptics\\SynTP\\TouchPadSMB2cTM3163 Basically, when they are 0 the touchpad remembers its state at the moment of the last logout, and when 1 , the touchpad will be enabled every login. Changing the values from 1 to 0 was the solution, to keep the touchpad disable. In case you're want to the same re-enabling behaviour in the touchpad, edit the above-mentioned values in the Registry. You can learn the basics on editing the Windows Registry here: Learn How to Use the Windows Registry Editor (Regedit) in One Easy Lesson .","tags":"posts","url":"https://www.castoriscausa.com/posts/2016/12/06/touchpad-disable/","loc":"https://www.castoriscausa.com/posts/2016/12/06/touchpad-disable/"},{"title":"poshbash in Windows bash","text":"The posh-git-bash prompt, for Git , is a useful tool that shows information about the current status of a local Git repository respect to local and remote (e.g. GitHub ) repositories; in this way, it's easy to see if the repository is ahead or behind, has uncommitted changes, is up-to-date, etc. Git-Posh example The posh-git-bash prompt is included in the PowerShell installed with GitHub Desktop software for Windows. This post describes how add the posh-git-bash prompt functionality into the Bash on Windows10 . If Bash on Windows is not already installed, this is the installation guide . Note : Enable Copy/Paste in Bash Right click in the Window Title bar > Properties Enable Quick Edit Mode Copy is Ctrl-C and Paste is Right-click Adding posh-git-bash prompt to Bash on Windows Run Bash and go to HOME directory in bash 1 $ cd ~ Download the file git-prompt.sh from this repository , and rename it as .git-prompt.sh 1 ~$ wget https://raw.githubusercontent.com/lyze/posh-git-sh/master/git-prompt.sh -O .git-prompt.sh Now you need to edit your the file ~/.bashrc Add the following 2 lines at the beginning of ~/.bashrc file , you can use the text editors nano or vim for this. 1 2 source ~/.git-prompt.sh PROMPT_COMMAND = '__posh_git_ps1 \"\\u@\\h:\\w\" \"\\\\\\$ \";' $PROMPT_COMMAND Restart Bash","tags":"posts","url":"https://www.castoriscausa.com/posts/2016/10/26/poshbash-windows-bash/","loc":"https://www.castoriscausa.com/posts/2016/10/26/poshbash-windows-bash/"},{"title":"First post","text":"This post is an example of a post in multiple languages. Metadata of this (Markdown) post file: 1 2 3 4 5 6 Title : First post Date : 2016 - 10 - 22 22 : 00 Category : Blog Slug : first - post Author : Raymundo Cassani Image : default To make the post available in more than one language, edit the metadata of the translated post as follows: The Slug MUST be the same for the original post and its translations Add the field Translation: true Add the field Lang: spa (for Spanish) Change the title to the other language Example, this same post in Spanish: http://www.castoriscausa.com/posts/2016/10/22/first-post/spa/","tags":"posts","url":"https://www.castoriscausa.com/posts/2016/10/22/first-post/","loc":"https://www.castoriscausa.com/posts/2016/10/22/first-post/"},{"title":"Primer post","text":"Este post es un ejemplo de como escribir posts en diferentes idiomas. Metadata de este post escrito en Markdown: 1 2 3 4 5 6 7 8 Title : Primer post Date : 2016 - 10 - 22 22 : 00 Category : Blog Slug : first - post Translation : true Lang : spa Author : Raymundo Cassani Image : default Este post es la versión en español de: http://www.castoriscausa.com/posts/2016/10/22/first-post/","tags":"posts","url":"https://www.castoriscausa.com/posts/2016/10/22/first-post/spa/","loc":"https://www.castoriscausa.com/posts/2016/10/22/first-post/spa/"}]};