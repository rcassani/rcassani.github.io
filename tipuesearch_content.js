var tipuesearch = {"pages":[{"title":"About","text":"My name is Raymundo Cassani , currently, I'm a Postdoctoral Researcher (Electrical Engineer - PhD) with an interdisciplinary formation, that includes biomedical signal processing with applications in health diagnostics, human-machine interaction and neurotechnologies. With a background in electrical engineering, specifically telecommunications and electronics, I'm a person who finds enjoyment in improving, repairing and modifying, also, rarely messing :(, stuff. I find great joy at learning a bit of everything, my bet is that a bit of everything is better that everything of a bit. Some of my beside-research interests are data visualization, maps, beavers, videogames, science fiction, languages and (gear) mechanisms etc. The principal goal of this blog, is: Share some of my work, projects, experiences, walkthroughs, dilemmas and / or solutions to problems (with software, hardware, methods, etc.) I've encountered and expended a significant amount of time on them; hopefully this may serve as timesaver and inspiration to others (including a future-me). Why CastorisCausa? From Latin Castoris (or related to the beaver) and Causa (cause), then roughly: \"For the sake of the beaver\" . The beaver (genus Castor), its nature and behaviour have always evoked my admiration and sympathy; being a semi-aquatic animal, it gets the best of two worlds. The beaver is the vivid description of hard work, dexterity and ingenuity. Not surprisingly, it has been taken as mascot by several engineering schools around the world. For feedback, suggestions or complains, leave a comment in the respective post. Alternatively, my contact info is at the bottom of the page.","tags":"Page","url":"http://www.castoriscausa.com/pages/about-me","loc":"http://www.castoriscausa.com/pages/about-me"},{"title":"Software","text":"This is list of some of the projects I have contributed. Most of the code is already available in my GitHub account , or it is available under request. The MuSAE Lab EEG Server (MuLES) is an EEG acquisition and streaming server programmed in LabVIEW. It creates a standard interface for portable EEG. Latest version is compatible with Interaxon Muse (2014), Emotiv EEG, Neuroelectrics Enobio, and OpenBCI devices. The Amplitude Modulation Analysis (AMA) Toolkit computes forward and inverse transformations between time, frequency, time-frequency and frequency-modulation-frequency domains. It also includes a GUI for the real-time exploration of the signals and their representations across different domains. The toolkit is available for Python3, Octave and MATLAB. Unity project to use a Ricoh Theta S camera to live-stream 360° video to a VR headset. https://github.com/rcassani/ThetaWifiStreaming2VRheadset . The Bluetooth Low-Energy (BLE) Toolkit for LabVIEW is an implementation of the BGAPI protocol v1.3 , that allows the communication with BLE devices over USB/UART in LabVIEW. The toolkit has been developed and tested with the BLE USB dongle BLED112 . The OpenBCI Toolkit for LabVIEW in a LabVIEW implementation of the OpenBCI communication protocol . It allows the configuration and data acquistion from the OpenBCI Cyton board (using its OpenBCI DONGLE ) for firmware 2.x or higher. The LabVIEW Emotiv Toolkit V2 extends the V1 by adding the capability of acquiring raw EEG data from the Emotiv Epoc and Epoc+ headsets. neuralDrift is a collaborative multiplayer neurogame based on brain-computer interfaces. The game consists in a LEGO© MINDSTORMS© EV3 robot, an Android device displaying the game state, and requires two EEG devices supported by MuLES .","tags":"pages","url":"http://www.castoriscausa.com/pages/software","loc":"http://www.castoriscausa.com/pages/software"},{"title":"Password management with Dropbox and KeePassXC","text":"unsplash-logo Samantha Lam Nowadays we have to handle an enormous quantity of passwords. As it is not desirable to reuse passwords, nor to write down, it is necessary to have a way manage them. My must- and nice-to-have list was: Encrypted passwords Passwords need to be always available, not depend on cloud storage Being able to access them from different OS Open-source software for encryption Synchronization among unlimited devices After research and thinking in advantages and drawbacks among the different methods, I came to the solution of using an offline password manager ( KeePassXC ) and service to synchronize files ( Dropbox ). KeePassXC is an open-source cross-platform password manager that has has support for Windows, Linux, macOS. Although the there is not official, KeePassXC uses a database format that can be read and written with other Android and iOS apps . To set up this password management strategy just: Created a database with KeePassXC, and select a strong password for it. This password must be memorable as it should not be stored in any place but in your head. Place the KeePassXC database file in a Dropbox folder. This will keep it synchronized in all your Dropbox devices. This approach has worked very nice in my case, although it presents disadvantages such as: If the master password for the database is lost, all the passwords are locked. In March 2019, Dropbox put a limit of 3 devices for Basic (free) users, and two different OS in the same computer count as two devices.","tags":"Blog","url":"http://www.castoriscausa.com/posts/2020/01/28/password-management-with-Dropbox-and-KeePassXC/","loc":"http://www.castoriscausa.com/posts/2020/01/28/password-management-with-Dropbox-and-KeePassXC/"},{"title":"About the book: The Seven Secrets of How to Think Like a Rocket Scientist","text":"The Seven Secrets of How to Think Like a Rocket Scientist by Jim Longuski , is one of the books that have enjoyed the most. The book is not a text book with theory and equations, (the What ), in rocket science; but rather the presents in an organized way approaches and methods, (the How ), that rocket scientists follow to approach the challenges of their endeavour. Despite the title, the book is written in an elegant but simple English that aims for the general public. In the same sense that knowing how the most acclaimed chefs prepared their dishes can improve anyone's cooking; anyone's skills to solve problems in the daily life can be improved by applying some of the methods presented in the book. The book has a section for each of the seven secrets (Dream, Judge, Ask, Check, Simplify, Optimize and Do); and each section is divided in brief chapters that present a concrete concept / methods, which is very often accompanied by anecdotes that make crystal clear the importance of such method. Among the ones that I use / remember the most is the KISS (Keep It Simple, Stupid) principle. As the cherry on the cake, at the end of the book, the author provides a distilled list of related reading material, as well as sci-fi. P.S. Be aware that the author makes very clear his position towards the space shuttle program.","tags":"Blog","url":"http://www.castoriscausa.com/posts/2019/04/21/comm-tssohttlars/","loc":"http://www.castoriscausa.com/posts/2019/04/21/comm-tssohttlars/"},{"title":"Vampire (electronic) devices","text":"An energy vampire device is the one that consumes electric energy anytime is plugged, even when it is not in use, one of the most common examples nowadays are chargers. Let's first define electric energy consumption. Electric energy consumption Electric energy consumption is measured as a number in kilowatt hour (kWh), and it's obtained by adding the product of device power, given in Watts (W), by utilization time in hours (h). For example, using one 100 W light bulb during 1 hour results in a consumption of 0.1 kWh, if the same bulb is used during 10 hours, the consumption is 1 kWh. On the other hand, in the case of a 'powerful' appliance as a standard microwave, with a typical power of 1500 kW, the energy consumption may not be as high as it used only in short periods. The unit kWh describes the quantity of work performed, thus it has an equivalent in work (or energy) units, which are Joules [J]. The equivalence is the following: 1 kWh is 1000 W times 3600 seconds. Thus, 1 kWh = 3.6 megajoules. Indeed, kWh is the unit that appears in the electricity receipt. Watts are always defined as Joules per second (J/s), no matter how they are calculated; in the case of electric power, it is calculated as the product of voltage times electric current, this is to say: P = E·I . Voltage ( E ) is given in Volts (V), which are defined as work per unit charge, this is: [Volt] = [Joules / Coulomb]. On the other hand, electric current ( I ), is measured in Amperes, and indicates the quantity of charge per second, thus [amp] = [Coulomb / second]. Therefore power ( P ) is [Watts] = E[Volts] x I[Amps] = E[Joule/Coulomb] x I[Coulomb/second] = P[Joules/second]. After this brief dimensional analysis , let's go back to the vampire devices. How much energy do they consume? Let's make the calculation for one smartphone charger, assuming it has a 'vampire' power is 0.26W (this is often reported by the maker), in a month (considering it's in vampire-mode 20 hours per day) the energy vampire consumption is 0.26[W] x 30[day] x 20[hour/day] = 156 Wh or 0.156 kWh, how much consumption is this? Sticking with the microwave example, the consumption is equivalent to use the microwave for over 6 minutes. How much do vampire devices contribute to the electricity bill? Assuming a price of 12.73cents of USD (USA average price) per kWh, the charge for 0.156 kWh results is 0.02 USD (2 cents) per month. While this seems small, remember that there are many vampire devices at on, and some consume more than others, for example an unused laptop charger in the same conditions (20hrs vampire mode), will lead to a cost of 33 cents per month.","tags":"Blog","url":"http://www.castoriscausa.com/posts/2019/03/06/energy-vampire-devices/","loc":"http://www.castoriscausa.com/posts/2019/03/06/energy-vampire-devices/"},{"title":"LinuxMint-19 + GTX1060 + CUDA 10.0","text":"Updated This article was updated to Mint 19 (based in Ubuntu 18.04), NVIDIA-driver 410 and CUDA driver 10.0 There are several posts with instructions for properly installing NVIDIA drivers in Linux . Unfortunately, sometimes they're outdated, moreover it's not possible to cover the immensity of system configurations. After searching and reading some of that information, I came down to this guide for my system ( Mint19 in MSI-GE62VR ) * . The guide consists of two parts: Install NVIDIA drivers Install and test CUDA drivers. * Similar steps should apply for other dual monitor setups in Ubuntu and Ubuntu-based distributions. System: MSI GE62VR Operative System Linux Mint 19 64-bit (Cinnamon) Hardware NVIDIA GTX 1060 Intel HD Graphics 530 (integrated GPU) 1 Install NVIDIA driver If the laptop's screen and external screen are working properly go to the CUDA section. It seems that common problems at installing NVIDIA drivers in Mint (and Ubuntu) are: the laptop's monitor is disabled when a external monitor is connected; or Cinnamon crashes in \"fallback mode\" when the system boots without external the monitor. So far the solution that worked for me, is to change to Nouveau drivers, purge any NVIDIA remaining and perform a clean NVIDIA installation Open the Driver Manager , and verify that the utilized drivers are the Nouveau display driver (change, and apply changes if necessary). Reboot your system. Once in Nouveau driver, purge the NVIDIA drivers $ sudo apt-get purge nvidia* Unplug the DigitalDisplay adapter Add the following repository to find the most recent drivers $ sudo add-apt-repository ppa:graphics-drivers/ppa $ sudo apt-get update $ sudo apt-get upgrade Open the Driver Manager select the recommended NVIDIA binary driver (nvidia-410 at January-2019) Restart your system The system should boot using the laptop's monitor as normally Connect the external monitor with the DigitalDisplay adapter Open Display to configure the position and behaviour of the monitors Open NVDIA X Server Settings to configure the external monitor 1A Problems at turning off NVIDA GPU with prime-select command If while using the NVIDIA drivers, the screen works fine but the prime-select command cannot turn off the NVIDIA GPU, thus changing to the intel GPU does not save power. Try the following. After installing, disable the nvidia-fallback service: $ sudo systemctl disable nvidia-fallback.service Blacklist nouveau driver using GRUB config. In /etc/default/grub look for a line GRUB_CMDLINE_LINUX . Add nouveau.blacklist=1 into that parameter. If the line is not present add this line GRUB_CMDLINE_LINUX=\"nouveau.blacklist=1\" If you are interested for power savings (for laptops with dual GPU and your system supports it): install bbswitch-dkms $ sudo apt install bbswitch-dkms Configure the system to load it by appending bbswitch in /etc/modules Now, to switch to Intel graphics run $ sudo prime-select intel To use NVIDIA (for external display etc) $ sudo prime-select nvidia 2 Install and Test CUDA driver Once the NVIDIA driver are properly installed, it's time to install the CUDA driver . If you're not sure what's the CUDA driver check this link Download the CUDA driver Change the downloaded file to executable and execute it $ chmod +x cuda_10.1.105_418.39_linux.run $ sudo sh cuda_10.1.105_418.39_linux.run --override Installation parameters. Select NO when the CUDA installer ask to install NVIDIA Accelerated Graphics Driver for Linux as the NVIDIA driver is already installed. Do you accept the previously read EULA? accept/decline/quit: accept You are attempting to install on an unsupported configuration. Do you wish to continue ? ( y ) es/ ( n ) o [ default is no ] : y Install NVIDIA Accelerated Graphics Driver for Linux-x86_64 375 .26? ( y ) es/ ( n ) o/ ( q ) uit: n Install the CUDA 8 .0 Toolkit? ( y ) es/ ( n ) o/ ( q ) uit: y Enter Toolkit Location [ default is /usr/local/cuda-8.0 ] : Do you want to install a symbolic link at /usr/local/cuda? ( y ) es/ ( n ) o/ ( q ) uit: y Install the CUDA 8 .0 Samples? ( y ) es/ ( n ) o/ ( q ) uit: y Enter CUDA Samples Location [ default is /home/cassani ] : /usr/local/cuda-8.0 Installing the CUDA Toolkit in /usr/local/cuda-8.0 ... Missing recommended library: libGLU.so Missing recommended library: libX11.so Missing recommended library: libXi.so Missing recommended library: libXmu.so Installing the CUDA Samples in /usr/local/cuda-8.0 ... Copying samples to /usr/local/cuda-8.0/NVIDIA_CUDA-8.0_Samples now... Finished copying samples. Prepare the CUDA environment by adding the following 3 lines to your .bashrc file export CUDA_HOME = /usr/local/cuda export LD_LIBRARY_PATH = /usr/local/cuda/lib64: $LD_LIBRARY_PATH export PATH = /usr/local/cuda/bin: $PATH And source it $ source ~/.bashrc Verify Cuda Compiler driver $ nvcc --version nvcc: NVIDIA ( R ) Cuda compiler driver Copyright ( c ) 2005 -2016 NVIDIA Corporation Built on Tue_Jan_10_13:22:03_CST_2017 Cuda compilation tools, release 8 .0, V8.0.61 Install g++ (If you haven't) $ sudo apt-get install g++ $ sudo apt-get install build-essential $ sudo apt-get install make (Optional) Install additional libraries to be able to build most of the samples: $ sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev Building the samples Several of the samples require GL libraries , to find the correct path for those libraries, the file fingllib.mk is used. As Linux Mint is not an officially supported distribution a slight change is necessary in the fingllib.mk file. To avoid editing all instances of this file, its multiple copies will be replaced with a symbolic link. Go to /common folder in the samples path $ cd /usr/local/cuda/samples/common Open fingllib.mk and, in the line 62 change ubuntu for 'ubuntu\\|linuxmint' Do not forget the simple quotes Search for all the instances of fingllib.mk outside of /common and replace them with a symbolic link to usr/local/cuda/samples/common/fingllib.mk . $ cd /usr/local/cuda/samples/common $ sudo find .. ! -path \"*/common*\" -name findgllib.mk -exec ln -sf /usr/local/cuda/samples/common/findgllib.mk {} ';' Run the commnad make while in the samples path $ cd /usr/local/cuda/samples $ sudo make Running the sample binaries Go to the sample binaries folder $ cd /usr/local/cuda/samples/bin/x86_64/linux/release Verify that your CUDA Capable device is found $ ./deviceQuery ./deviceQuery Starting... CUDA Device Query ( Runtime API ) version ( CUDART static linking ) Detected 1 CUDA Capable device ( s ) Device 0 : \"GeForce GTX 1060\" CUDA Driver Version / Runtime Version 8 .0 / 8 .0 CUDA Capability Major/Minor version number: 6 .1 ... Sample fluidsGL $ ./fluidsGL References http://blog.csdn.net/kernlen/article/details/53882490 http://blog.csdn.net/wopawn/article/details/52302164 http://blog.csdn.net/lee_j_r/article/details/52693724 http://www.voidcn.com/blog/u010696366/article/p-3712151.html http://stackoverflow.com/questions/34617236/cuda-missing-libgl-so-libglu-so-and-libx11-so https://www.pugetsystems.com/labs/hpc/NVIDIA-CUDA-with-Ubuntu-16-04-beta-on-a-laptop-if-you-just-cannot-wait-775/ http://docs.nvidia.com/cuda/cuda-installation-guide-linux/#axzz4Y9Whzcjf https://devtalk.nvidia.com/default/topic/936429/-solved-tensorflow-with-gpu-in-anaconda-env-ubuntu-16-04-cuda-7-5-cudnn-/ http://developer.download.nvidia.com/compute/cuda/6_5/rel/docs/CUDA_Getting_Started_Linux.pdf https://forums.linuxmint.com/viewtopic.php?t=226145 https://medium.com/@agathver/nvidia-gpu-optimus-prime-and-ubuntu-18-04-woes-f52e7f850f3d","tags":"Blog","url":"http://www.castoriscausa.com/posts/2019/01/31/ge62vr-mint-gtx1060/","loc":"http://www.castoriscausa.com/posts/2019/01/31/ge62vr-mint-gtx1060/"},{"title":"Revamping Emotiv Epoc","text":"The Emotiv Epoc is a 14-channel EEG headset that brought the concept of affordable wireless EEG to the general public, paving the road for later portable EEG systems. It has been used for in several studies . Unfortunately, the Epoc presents two characteristics that make some experiments unpractical. (1) The electrode placement , fix as it is, forbids locating electrodes on some interesting scalp places for certain EEG, for example on the central line. (2) The technology of the electrodes , the contact between the electrode and scalp is mediated by sponges that need to be wet with saline solution, thus for long recordings (>1 hr), the solution starts to dry affecting the quality of the EEG signals. After some years of use at our laboratory, the MuSAE Lab , the structure that holds the Epoc arms as one piece got broken. While this condition could be fixed, we opted to follow the approach taken by Stefan Debener in the 2012 paper How about taking a low-cost, small, and wireless EEG for a walk? , this is to say, to remove the electronics from the EEG headset and give it a new (and more practical) case. Emotiv Epoc. In the red the part that was broken. Beside the new casing: The original battery was replaced by a 3.7V @ 1100mAh battery , with a size 4 x 37 x 59 mm (important to the case design). The EEG headset cables were replaced by cables ended in the DIN (touch-proof) connectors to support different standard electrode models. 3.7V 1100mAh battery EEG DIN (touch-proof) cables The vamping process consisted of four parts: Striping the electronics from the Epoc Soldering the new battery and electrode cables Placing everything in the new case 1. Striping the electronics This part was performed by Liviu Ivanescu , here some of the pictures. Additional photos on the Epoc interior can be found here and in this report . 2. Replacing the battery and electrode cables The soldering part is the most crucial, as screwing it screws the EEG device that was working (however it was not useful with the broken structure). Note that thru-hole pads for the cables interconnect the top and bottom layer of the PCB, i.e. they are Thru-hole Vias , thus it is not needed to pass the cables through the hole, a surface soldering will be enough to assure a good electric contact. Surface soldering. 3. Place everything in a new casing The approach for the case was 3D printing, the models was designed in Tinkercad as publicly available here . It 3D printed at District3 . Tinkercad model Placement of components Final result, a Canadian looney ($1) with a 26.5 mm diameter as reference. To keep the the elements in its place I used segments of silicone bars, which happened to be very useful for that purpose. To take the cables out of the box, a rubber wiring grommet was used. Finally a quick road test, Epoc in its new case + a bucket of salt water + ECG signal. Conclusion The hole process of tuning up the Epoc was a great experience, and I hope this post can help others in repairing and / or improving their own Epoc devices.","tags":"Projects","url":"http://www.castoriscausa.com/posts/2017/09/16/emotive-epoc-hack/","loc":"http://www.castoriscausa.com/posts/2017/09/16/emotive-epoc-hack/"},{"title":"Linux freezes when changing GPU with prime-select [Solved]","text":"A frequent problem in dual-GPU systems is that the PC freezes ( kernel panic ) when you try to logout, restart or shutdown after changing back from the Intel (integrated) to the NVIDIA (discrete) GPU in Linux. All of this when you're using the NVIDIA drivers (proprietary drivers). When using the NVIDIA drivers for Linux, it's possible to change the GPU in use with the prime-select command followed by logout. Switching from NVIDIA to Intel GPU works perfectly: $ sudo prime-select intel Then logout and login to see the changes. By changing to the discrete GPU power consumption drops almost by half, providing a decent battery life in laptops. However, the kernel panic occurs when switching back from the Intel to NVIDIA GPU. $ sudo prime-select nvidia After changing the GPU with prime-select , either logout, restart or shutdown will result in kernel panic. Solution The problem is likely to be cause by ACPI configuration in the kernel boot sequence. It can be solved by adding the following to the kernel boot sequence: acpi_osi=! acpi_osi=\"Windows 2009\" This can be done by editing the kernel boot parameters , or more convenient and easier with the help of GrubCustomizer . After than change you should be able to logout correctly after changing from the Intel to the NVIDIA GPU. References https://bugs.launchpad.net/lpbugreporter/+bug/752542/comments/793 https://github.com/Bumblebee-Project/Bumblebee/issues/764#issuecomment-234494238","tags":"Blog","url":"http://www.castoriscausa.com/posts/2017/08/29/freezes-linux-gpu-acpi/","loc":"http://www.castoriscausa.com/posts/2017/08/29/freezes-linux-gpu-acpi/"},{"title":"Universal Shortcut","text":"This project started from the \"need\" of having a compatible way to point to files indifferently if on Windows or Linux. While both operative systems can handle symbolic links, when the target file is an executable, certain scripts and programs present problems when executed through a symbolic link , as the working directory is expected to be the directory containing the executable and not the directory with the symbolic link. For that reason, a different approach was taken. To create an hybrid script with Bash and Batch code to point to the desired files or program. This kind of script is possible by using the commenting format of Batch files to ignore the Bash commands . In this sense such files can are universal shortcuts . As the paths utilized in this universal shortcut file, are relative, it works perfectly with portable media, if and only if, the filesystem supports file permissions. Note: FAT32 does not support them. The universal shortcuts consist of an executable script file with Bash and Batch code. When executed in Windows the Bash part is ignored and when executed in Linux the Batch part is ignored. Thus, the same script can be executed in both systems and performs the same action. The scripts in bash and batch are equivalent and they do: Change the current directory to the directory where the target file is Open the target file in a similar way as when the user double clicks it, this operation depends on the Desktop Environment utilized Exit The universal shortcut is created by a Python 3 script that can be found in this repository: https://github.com/rcassani/universal-shortcuts Usage $ python3 mk_unishortcut.py <targetpath> the <targetpath> can be absolute or relative, and can be a file or directory When the Python script is executed in Linux it will automatically change the file permissions of the shortcut file to be executable. If the Python script is run in Windows, it is needed to change the file permissions to executable in Linux. Despite the fact these universal shortcuts may not be extremely useful, this project was an interesting experience in writing hybrid Bash-Batch scripts. References: Symbolic links fail to run executable files when they need to run in their folder https://askubuntu.com/questions/541317/link-to-exe-doesnt-launch-wine Hybrid Windows-bash and Linux-bash scripting https://stackoverflow.com/questions/17510688/single-script-to-run-in-both-windows-batch-and-linux-bash Identify Linux Desktop Environment https://github.com/alexeevdv/dename/blob/master/dename.sh start command in Windows https://technet.microsoft.com/en-us/library/cc770297(v=ws.11).aspx Link with different Desktop Environments https://renewablepcs.wordpress.com/about-linux/kde-gnome-or-xfce/","tags":"Programming","url":"http://www.castoriscausa.com/posts/2017/07/25/universal-shortcuts/","loc":"http://www.castoriscausa.com/posts/2017/07/25/universal-shortcuts/"},{"title":"Full Linux installation in USB, supporting UEFI-boot","text":"This post is about creating a UEFI-bootable full Linux installation in a USB Flash Drive or External HDD. For sake of simplicity, I'll refer to a USB Flash Drive or a USB External HDD as USB-disk . This procedure is performed in a computer running Windows without installing Linux in the HDD, therefore there is no modification (nor mess) in the Windows EFI partition. Here a nice explanation on how UEFI boot works . First of all, if you're looking for Live-USB with or without Persistence with both Legacy and UEFI boot, a nice option in Windows is LinuxLive USB Creator . These are the differences between Live-USB with Persistence and a USB Full Install . Process Big Picture The procedure comprehends three main parts: Creating UEFI-booting Virtual Machine, without (virtual) HHD Installing Linux in the USB-disk Modifying the EFI partition in the USB-disk Requirements VMware installed The Workstation Player version is free for non-commercial use USB-disk , USB3 if your computer supports it I've tried the procedure with both USB Flash Drive and External HDD ISO image of your favorite Linux distribution For the following steps an ISO image of Linux Mint 18.1 64-bit was used, similar instructions should apply for other distributions. Procedure: 1. Creating UEFI-booting Virtual Machine, without (virtual) HHD Open VMware and Create a New Virtual Machine Select the I will install the operative system later option. Click on Next Set Guest Operating System to Linux, select your version or the closest one, in my case the closest to Mint 64-bit is Ubuntu 64-bit . Click on Next Assign a Virtual machine name and Location to the Virtual Machine. Remember these fields, and they'll used later. Click on Next Disk Capacity , default parameters (this HDD will not be used). Click Next Click on Customize Hardware For the New CD/DVD (SATA) , Select Use ISO image file and browse for your Linux ISO image For the USB Controller , Select USB 3.0 (if supported), [X]Automatically ..., [ ]Show all... and [ ]Share Bluetooth... Before completing the wizard, identify the Location of the Virtual Machine. Click on Finish . Do not power ON the Virtual Machine yet. Go to the Virtual Machine Location , and with help of a text editor (e.g. Notepad), open the file VMname.vmx (where the VMname is the Virtual machine name assigned in step 4). And add the line firmware = \"efi\" at the end of the file In VMware , open the settings of your brand new Virtual Machine and remove the HDD 2. Installing Linux in USB-disk In the step, the Virtual Machine will boot in UEFI using the Linux ISO image, from there it'll possible to install Linux in the USB-disk. In VMware , Power ON the Virtual Machine. When booting on UEFI, it should look as below (at least for Mint 64-bit ). Select Start Linux Mint 18 Cinnamon 64-bit (or Try Ubuntu without installing ) Once the Linux session is started, connect (physically) your USB-disk, and be sure it's connected to the Virtual Machine To start the procedure with a blank USB-disk. In the Virtual Machine, Open GParted (hopefully is installed). Then select your device at the upper right corner (remember its sdx ), then go to Device > Create Partition Table , select the type gtp . Close GParted. Click on the Install Linux (Mint) icon on Desktop. Select your language. Leave unchecked the option Install third-party software... In Installation type select Erase disk and install Linux Mint One the installation is done, select Continue Testing 3. Modifying the EFI partition in the USB-disk Still in the Linux session (Virtual Machine without HDD booted with Live-CD) from the previous section, the remaining part is to prepare the EFI partition on the USB-disk to make it UEFI-bootable Create a folder /mnt/efi/ :::powershell $ sudo mkdir /mnt/efi/ Mount the EFI partition in the recently created folder. Change sdx for the corresponding to your USB-disk (step 4 in previous section) $ sudo mount / dev / sdx1 / mnt / efi $ cd / mnt / efi / EFI Copy the ubuntu folder to the same location with the name BOOT $ sudo cp -r ./ ubuntu / ./ BOOT / Finally, copy the file BOOTx64.EFI from to the Linux ISO image to the BOOT folder in EFI partition of the USB-disk $ sudo cp / media / cdrom / EFI / BOOT / BOOTx64 . EFI ./ BOOT / Shut down the Virtual Machine properly. Congratulations, now your USB-disk should be UEFI-bootable Finally, reboot your computer, and select the USB-disk (Partition 1) for UEFI boot. I've try this method using an external SSD via USB and a Lexar USB flash drive without issues.","tags":"Blog","url":"http://www.castoriscausa.com/posts/2017/01/31/linux-usb-uefi/","loc":"http://www.castoriscausa.com/posts/2017/01/31/linux-usb-uefi/"},{"title":"Keeping Synaptics Touchpad disabled","text":"Touchpads in laptops are not for everyone, one of the first things to do when a I get a new computer is to plug a mouse and disable the touchpad (TP). Few weeks ago, I noticed a strange behavior, in my laptop , every time I started a session in Windows, the touchpad was enabled , that is to say it did not keep its previous status. The touchpad is a Synaptics SMBus TouchPad . As this behavior was annoying , something needed to be done. After some research I came across this wonderful solution where the touchpad is automatically disabled when a mouse is detected . Unfortunately, the Steelseris Keyboard in my laptop is detected as keyboard-mouse combo , then, the auto-disable, would permanently disable the touchpad, without option to enable it and who knows it could be useful (someday). Touchpad and Keyboard in GE62VR Later, after diving in Windows Register , with Regedit, I noticed a value, in two keys, that controls the touchpad's behavior at the beginning of the Windows session: DisableDeviceUntilSessionEnd in HKEY_CURRENT_USER\\SOFTWARE\\Synaptics\\SynTP\\TouchPadPS2TM3163 HKEY_CURRENT_USER\\SOFTWARE\\Synaptics\\SynTP\\TouchPadSMB2cTM3163 Basically, when they are 0 the touchpad remembers its state at the moment of the last logout, and when 1 , the touchpad will be enabled every login. Changing the values from 1 to 0 was the solution, to keep the touchpad disable. In case you're want to the same re-enabling behaviour in the touchpad, edit the above-mentioned values in the Registry. You can learn the basics on editing the Windows Registry here: Learn How to Use the Windows Registry Editor (Regedit) in One Easy Lesson .","tags":"Blog","url":"http://www.castoriscausa.com/posts/2016/12/06/touchpad-disable/","loc":"http://www.castoriscausa.com/posts/2016/12/06/touchpad-disable/"},{"title":"poshbash in Windows bash","text":"The posh-git-bash prompt, for Git , is a useful tool that shows information about the current status of a local Git repository respect to local and remote (e.g. GitHub ) repositories; in this way, it's easy to see if the repository is ahead or behind, has uncommitted changes, is up-to-date, etc. Git-Posh example The posh-git-bash prompt is included in the PowerShell installed with GitHub Desktop software for Windows. This post describes how add the posh-git-bash prompt functionality into the Bash on Windows10 . If Bash on Windows is not already installed, this is the installation guide . Note : Enable Copy/Paste in Bash Right click in the Window Title bar > Properties Enable Quick Edit Mode Copy is Ctrl-C and Paste is Right-click Adding posh-git-bash prompt to Bash on Windows Run Bash and go to HOME directory in bash $ cd ~ Download the file git-prompt.sh from this repository , and rename it as .git-prompt.sh ~$ wget https://raw.githubusercontent.com/lyze/posh-git-sh/master/git-prompt.sh -O .git-prompt.sh Now you need to edit your the file ~/.bashrc Add the following 2 lines at the beginning of ~/.bashrc file , you can use the text editors nano or vim for this. source ~/.git-prompt.sh PROMPT_COMMAND = '__posh_git_ps1 \"\\u@\\h:\\w\" \"\\\\\\$ \";' $PROMPT_COMMAND Restart Bash","tags":"Blog","url":"http://www.castoriscausa.com/posts/2016/10/26/poshbash-windows-bash/","loc":"http://www.castoriscausa.com/posts/2016/10/26/poshbash-windows-bash/"},{"title":"First post","text":"This post is an example of a post in multiple languages. Metadata of this (Markdown) post file: Title : First post Date : 2016 - 10 - 22 22 : 00 Category : Blog Slug : first - post Author : Raymundo Cassani Image : default To make the post available in more than one language, edit the metadata of the translated post as follows: The Slug MUST be the same for the original post and its translations Add the field Translation: true Add the field Lang: spa (for Spanish) Change the title to the other language Example, this same post in Spanish: http://www.castoriscausa.com/posts/2016/10/22/first-post/spa/","tags":"Blog","url":"http://www.castoriscausa.com/posts/2016/10/22/first-post/","loc":"http://www.castoriscausa.com/posts/2016/10/22/first-post/"},{"title":"Primer post","text":"Este post es un ejemplo de como escribir posts en diferentes idiomas. Metadata de este post escrito en Markdown: Title : Primer post Date : 2016 - 10 - 22 22 : 00 Category : Blog Slug : first - post Translation : true Lang : spa Author : Raymundo Cassani Image : default Este post es la versión en español de: http://www.castoriscausa.com/posts/2016/10/22/first-post/","tags":"Blog","url":"http://www.castoriscausa.com/posts/2016/10/22/first-post/spa/","loc":"http://www.castoriscausa.com/posts/2016/10/22/first-post/spa/"}]};